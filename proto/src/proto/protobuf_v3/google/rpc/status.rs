// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `status.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.rpc.Status)
pub struct Status {
    // message fields
    ///  The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
    // @@protoc_insertion_point(field:google.rpc.Status.code)
    pub code: i32,
    ///  A developer-facing error message, which should be in English. Any
    ///  user-facing error message should be localized and sent in the
    ///  [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
    // @@protoc_insertion_point(field:google.rpc.Status.message)
    pub message: ::std::string::String,
    ///  A list of messages that carry the error details.  There will be a
    ///  common set of message types for APIs to use.
    // @@protoc_insertion_point(field:google.rpc.Status.details)
    pub details: ::std::vec::Vec<::protobufv3::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.Status.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobufv3::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &Status| { &m.code },
            |m: &mut Status| { &mut m.code },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Status| { &m.message },
            |m: &mut Status| { &mut m.message },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "details",
            |m: &Status| { &m.details },
            |m: &mut Status| { &mut m.details },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<Status>(
            "Status",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for Status {
    const NAME: &'static str = "Status";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_int32()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                26 => {
                    self.details.push(is.read_message()?);
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobufv3::rt::string_size(2, &self.message);
        }
        for value in &self.details {
            let len = value.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        for v in &self.details {
            ::protobufv3::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Status {
        Status::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Status {
        static instance: Status = Status {
            code: 0,
            message: ::std::string::String::new(),
            details: ::std::vec::Vec::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for Status {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Status").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for Status {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cstatus.proto\x12\ngoogle.rpc\x1a\x19google/protobuf/any.proto\"f\n\
    \x06Status\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\x04code\x12\x18\n\x07\
    message\x18\x02\x20\x01(\tR\x07message\x12.\n\x07details\x18\x03\x20\x03\
    (\x0b2\x14.google.protobuf.AnyR\x07detailsB^\n\x0ecom.google.rpcB\x0bSta\
    tusProtoP\x01Z7google.golang.org/genproto/googleapis/rpc/status;status\
    \xa2\x02\x03RPCJ\x8b\x1e\n\x06\x12\x04\x0e\0[\x01\n\xbd\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202016\x20Google\x20Inc.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\t\n\x02\x03\0\x12\x03\x12\0#\
    \n\x08\n\x01\x08\x12\x03\x14\0N\n\t\n\x02\x08\x0b\x12\x03\x14\0N\n\x08\n\
    \x01\x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\n\x08\n\x01\x08\
    \x12\x03\x16\0,\n\t\n\x02\x08\x08\x12\x03\x16\0,\n\x08\n\x01\x08\x12\x03\
    \x17\0'\n\t\n\x02\x08\x01\x12\x03\x17\0'\n\x08\n\x01\x08\x12\x03\x18\0!\
    \n\t\n\x02\x08$\x12\x03\x18\0!\n\xd6\x13\n\x02\x04\0\x12\x04O\0[\x01\x1a\
    \xc9\x13\x20The\x20`Status`\x20type\x20defines\x20a\x20logical\x20error\
    \x20model\x20that\x20is\x20suitable\x20for\x20different\n\x20programming\
    \x20environments,\x20including\x20REST\x20APIs\x20and\x20RPC\x20APIs.\
    \x20It\x20is\x20used\x20by\n\x20[gRPC](https://github.com/grpc).\x20The\
    \x20error\x20model\x20is\x20designed\x20to\x20be:\n\n\x20-\x20Simple\x20\
    to\x20use\x20and\x20understand\x20for\x20most\x20users\n\x20-\x20Flexibl\
    e\x20enough\x20to\x20meet\x20unexpected\x20needs\n\n\x20#\x20Overview\n\
    \n\x20The\x20`Status`\x20message\x20contains\x20three\x20pieces\x20of\
    \x20data:\x20error\x20code,\x20error\x20message,\n\x20and\x20error\x20de\
    tails.\x20The\x20error\x20code\x20should\x20be\x20an\x20enum\x20value\
    \x20of\n\x20[google.rpc.Code][google.rpc.Code],\x20but\x20it\x20may\x20a\
    ccept\x20additional\x20error\x20codes\x20if\x20needed.\x20\x20The\n\x20e\
    rror\x20message\x20should\x20be\x20a\x20developer-facing\x20English\x20m\
    essage\x20that\x20helps\n\x20developers\x20*understand*\x20and\x20*resol\
    ve*\x20the\x20error.\x20If\x20a\x20localized\x20user-facing\n\x20error\
    \x20message\x20is\x20needed,\x20put\x20the\x20localized\x20message\x20in\
    \x20the\x20error\x20details\x20or\n\x20localize\x20it\x20in\x20the\x20cl\
    ient.\x20The\x20optional\x20error\x20details\x20may\x20contain\x20arbitr\
    ary\n\x20information\x20about\x20the\x20error.\x20There\x20is\x20a\x20pr\
    edefined\x20set\x20of\x20error\x20detail\x20types\n\x20in\x20the\x20pack\
    age\x20`google.rpc`\x20which\x20can\x20be\x20used\x20for\x20common\x20er\
    ror\x20conditions.\n\n\x20#\x20Language\x20mapping\n\n\x20The\x20`Status\
    `\x20message\x20is\x20the\x20logical\x20representation\x20of\x20the\x20e\
    rror\x20model,\x20but\x20it\n\x20is\x20not\x20necessarily\x20the\x20actu\
    al\x20wire\x20format.\x20When\x20the\x20`Status`\x20message\x20is\n\x20e\
    xposed\x20in\x20different\x20client\x20libraries\x20and\x20different\x20\
    wire\x20protocols,\x20it\x20can\x20be\n\x20mapped\x20differently.\x20For\
    \x20example,\x20it\x20will\x20likely\x20be\x20mapped\x20to\x20some\x20ex\
    ceptions\n\x20in\x20Java,\x20but\x20more\x20likely\x20mapped\x20to\x20so\
    me\x20error\x20codes\x20in\x20C.\n\n\x20#\x20Other\x20uses\n\n\x20The\
    \x20error\x20model\x20and\x20the\x20`Status`\x20message\x20can\x20be\x20\
    used\x20in\x20a\x20variety\x20of\n\x20environments,\x20either\x20with\
    \x20or\x20without\x20APIs,\x20to\x20provide\x20a\n\x20consistent\x20deve\
    loper\x20experience\x20across\x20different\x20environments.\n\n\x20Examp\
    le\x20uses\x20of\x20this\x20error\x20model\x20include:\n\n\x20-\x20Parti\
    al\x20errors.\x20If\x20a\x20service\x20needs\x20to\x20return\x20partial\
    \x20errors\x20to\x20the\x20client,\n\x20\x20\x20\x20\x20it\x20may\x20emb\
    ed\x20the\x20`Status`\x20in\x20the\x20normal\x20response\x20to\x20indica\
    te\x20the\x20partial\n\x20\x20\x20\x20\x20errors.\n\n\x20-\x20Workflow\
    \x20errors.\x20A\x20typical\x20workflow\x20has\x20multiple\x20steps.\x20\
    Each\x20step\x20may\n\x20\x20\x20\x20\x20have\x20a\x20`Status`\x20messag\
    e\x20for\x20error\x20reporting\x20purpose.\n\n\x20-\x20Batch\x20operatio\
    ns.\x20If\x20a\x20client\x20uses\x20batch\x20request\x20and\x20batch\x20\
    response,\x20the\n\x20\x20\x20\x20\x20`Status`\x20message\x20should\x20b\
    e\x20used\x20directly\x20inside\x20batch\x20response,\x20one\x20for\n\
    \x20\x20\x20\x20\x20each\x20error\x20sub-response.\n\n\x20-\x20Asynchron\
    ous\x20operations.\x20If\x20an\x20API\x20call\x20embeds\x20asynchronous\
    \x20operation\n\x20\x20\x20\x20\x20results\x20in\x20its\x20response,\x20\
    the\x20status\x20of\x20those\x20operations\x20should\x20be\n\x20\x20\x20\
    \x20\x20represented\x20directly\x20using\x20the\x20`Status`\x20message.\
    \n\n\x20-\x20Logging.\x20If\x20some\x20API\x20errors\x20are\x20stored\
    \x20in\x20logs,\x20the\x20message\x20`Status`\x20could\n\x20\x20\x20\x20\
    \x20be\x20used\x20directly\x20after\x20any\x20stripping\x20needed\x20for\
    \x20security/privacy\x20reasons.\n\n\n\n\x03\x04\0\x01\x12\x03O\x08\x0e\
    \nd\n\x04\x04\0\x02\0\x12\x03Q\x02\x11\x1aW\x20The\x20status\x20code,\
    \x20which\x20should\x20be\x20an\x20enum\x20value\x20of\x20[google.rpc.Co\
    de][google.rpc.Code].\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03Q\x02\x07\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03Q\x08\x0c\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03Q\x0f\x10\n\xeb\x01\n\x04\x04\0\x02\x01\x12\x03V\x02\x15\x1a\xdd\
    \x01\x20A\x20developer-facing\x20error\x20message,\x20which\x20should\
    \x20be\x20in\x20English.\x20Any\n\x20user-facing\x20error\x20message\x20\
    should\x20be\x20localized\x20and\x20sent\x20in\x20the\n\x20[google.rpc.S\
    tatus.details][google.rpc.Status.details]\x20field,\x20or\x20localized\
    \x20by\x20the\x20client.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03V\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03V\t\x10\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03V\x13\x14\n~\n\x04\x04\0\x02\x02\x12\x03Z\x02+\x1aq\x20A\
    \x20list\x20of\x20messages\x20that\x20carry\x20the\x20error\x20details.\
    \x20\x20There\x20will\x20be\x20a\n\x20common\x20set\x20of\x20message\x20\
    types\x20for\x20APIs\x20to\x20use.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03Z\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03Z\x0b\x1e\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03Z\x1f&\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03Z)\
    *b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobufv3::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Status::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
