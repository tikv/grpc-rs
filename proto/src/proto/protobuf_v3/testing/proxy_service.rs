// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proxy-service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.ProxyStat)
pub struct ProxyStat {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.ProxyStat.latency)
    pub latency: f64,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.ProxyStat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProxyStat {
    fn default() -> &'a ProxyStat {
        <ProxyStat as ::protobuf::Message>::default_instance()
    }
}

impl ProxyStat {
    pub fn new() -> ProxyStat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latency",
            |m: &ProxyStat| { &m.latency },
            |m: &mut ProxyStat| { &mut m.latency },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProxyStat>(
            "ProxyStat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProxyStat {
    const NAME: &'static str = "ProxyStat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.latency = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.latency != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.latency != 0. {
            os.write_double(1, self.latency)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProxyStat {
        ProxyStat::new()
    }

    fn clear(&mut self) {
        self.latency = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProxyStat {
        static instance: ProxyStat = ProxyStat {
            latency: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProxyStat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProxyStat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProxyStat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyStat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proxy-service.proto\x12\x0cgrpc.testing\x1a\rcontrol.proto\x1a\x0b\
    stats.proto\"%\n\tProxyStat\x12\x18\n\x07latency\x18\x01\x20\x01(\x01R\
    \x07latency2\xcf\x01\n\x12ProxyClientService\x12;\n\tGetConfig\x12\x12.g\
    rpc.testing.Void\x1a\x1a.grpc.testing.ClientConfig\x12;\n\nReportTime\
    \x12\x17.grpc.testing.ProxyStat\x1a\x12.grpc.testing.Void(\x01\x12?\n\nR\
    eportHist\x12\x1b.grpc.testing.HistogramData\x1a\x12.grpc.testing.Void(\
    \x01J\x92\x07\n\x06\x12\x04\x0e\0\x1d\x01\n\xbf\x04\n\x01\x0c\x12\x03\
    \x0e\0\x122\xb4\x04\x20Copyright\x202017\x20gRPC\x20authors.\n\n\x20Lice\
    nsed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\
    \"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\
    \x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtai\
    n\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http\
    ://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\t\n\x02\x03\0\x12\x03\x10\0\x17\n\t\n\x02\x03\x01\x12\x03\x11\0\x15\
    \n\x08\n\x01\x02\x12\x03\x13\0\x15\n\n\n\x02\x04\0\x12\x04\x15\0\x17\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x16\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x16\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x16\x13\x14\n\n\n\x02\x06\0\x12\x04\x19\0\x1d\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x19\x08\x1a\n\x0b\n\x04\x06\0\x02\0\x12\x03\x1a\x02-\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x1a\x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x1a\x10\x14\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x1a\x1f+\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x1b\x022\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x1b\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x05\x12\x03\x1b\x11\x17\n\x0c\
    \n\x05\x06\0\x02\x01\x02\x12\x03\x1b\x18!\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x1b,0\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x1c\x026\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x1c\x06\x10\n\x0c\n\x05\x06\0\x02\x02\x05\x12\
    \x03\x1c\x11\x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1c\x18%\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x1c04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::control::file_descriptor().clone());
            deps.push(super::stats::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ProxyStat::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
