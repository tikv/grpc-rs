// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `compiler_test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.Request)
pub struct Request {
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.Response)
pub struct Response {
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13compiler_test.proto\x12\x0cgrpc.testing\"\t\n\x07Request\"\n\n\x08\
    Response2\xfe\x01\n\x08ServiceA\x129\n\x08MethodA1\x12\x15.grpc.testing.\
    Request\x1a\x16.grpc.testing.Response\x12;\n\x08MethodA2\x12\x15.grpc.te\
    sting.Request\x1a\x16.grpc.testing.Response(\x01\x12;\n\x08MethodA3\x12\
    \x15.grpc.testing.Request\x1a\x16.grpc.testing.Response0\x01\x12=\n\x08M\
    ethodA4\x12\x15.grpc.testing.Request\x1a\x16.grpc.testing.Response(\x010\
    \x012E\n\x08ServiceB\x129\n\x08MethodB1\x12\x15.grpc.testing.Request\x1a\
    \x16.grpc.testing.ResponseJ\x9d\x0f\n\x06\x12\x04\x13\0E\x01\n\x8f\x05\n\
    \x01\x0c\x12\x03\x13\0\x12\x1a\x18\x20File\x20leading\x20comment\x201\n2\
    \xb4\x04\x20Copyright\x202016\x20gRPC\x20authors.\n\n\x20Licensed\x20und\
    er\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\"\
    );\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20comp\
    liance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n2\x19\x20File\
    \x20detached\x20comment\x201\n2\x19\x20File\x20detached\x20comment\x202\
    \n\n\xf5\x01\n\x01\x02\x12\x03\x1b\0\x15\x1a!\x20Ignored\x20package\x20l\
    eading\x20comment\n2\xc7\x01\x20Ignored\x20detached\x20comment\n\x20The\
    \x20comments\x20in\x20this\x20file\x20are\x20not\x20meant\x20for\x20read\
    ability\n\x20but\x20rather\x20to\x20test\x20to\x20make\x20sure\x20that\
    \x20the\x20code\x20generator\n\x20properly\x20preserves\x20comments\x20o\
    n\x20files,\x20services,\x20and\x20RPCs.\n\n\n\n\x02\x04\0\x12\x04\x1d\0\
    \x1e\x01\n\n\n\x03\x04\0\x01\x12\x03\x1d\x08\x0f\n\n\n\x02\x04\x01\x12\
    \x04\x1f\0\x20\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08\x10\n\xb1\x01\n\
    \x02\x06\0\x12\x04)\0;\x01\x1a\x1c\x20ServiceA\x20leading\x20comment\x20\
    1\n2\x1d\x20ServiceA\x20detached\x20comment\x201\n2\x1d\x20ServiceA\x20d\
    etached\x20comment\x202\n2I\x20Comments\x20may\x20contain\x20special\x20\
    characters\x20like\x20\"^[a-z0-9-]{1,63}$\"\x20and\x20$$\n\n\n\n\x03\x06\
    \0\x01\x12\x03)\x08\x10\nH\n\x04\x06\0\x02\0\x12\x03+\x02+\x1a\x1c\x20Me\
    thodA1\x20leading\x20comment\x201\n\"\x1d\x20MethodA1\x20trailing\x20com\
    ment\x201\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03+\x06\x0e\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x03+\x0f\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03+!)\n\
    \x8d\x01\n\x04\x06\0\x02\x01\x12\x031\x022\x1a:\x20Method\x20A2\x20leadi\
    ng\x20comment\x201\n\x20Method\x20A2\x20leading\x20comment\x202\n\"\x1d\
    \x20MethodA2\x20trailing\x20comment\x201\n2%\x20MethodA2\x20detached\x20\
    leading\x20comment\x201\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x031\x06\x0e\
    \n\x0c\n\x05\x06\0\x02\x01\x05\x12\x031\x0f\x15\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x031\x16\x1d\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x031(0\nJ\n\
    \x04\x06\0\x02\x02\x12\x035\x022\x1a\x1d\x20Method\x20A3\x20leading\x20c\
    omment\x201\n\"\x1e\x20Method\x20A3\x20trailing\x20comment\x201\n\n\x0c\
    \n\x05\x06\0\x02\x02\x01\x12\x035\x06\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x035\x0f\x16\n\x0c\n\x05\x06\0\x02\x02\x06\x12\x035!'\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x035(0\nJ\n\x04\x06\0\x02\x03\x12\x039\x029\x1a\
    \x1d\x20Method\x20A4\x20leading\x20comment\x201\n\"\x1e\x20Method\x20A4\
    \x20trailing\x20comment\x201\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x039\
    \x06\x0e\n\x0c\n\x05\x06\0\x02\x03\x05\x12\x039\x0f\x15\n\x0c\n\x05\x06\
    \0\x02\x03\x02\x12\x039\x16\x1d\n\x0c\n\x05\x06\0\x02\x03\x06\x12\x039(.\
    \n\x0c\n\x05\x06\0\x02\x03\x03\x12\x039/7\nG\n\x02\x06\x01\x12\x04?\0E\
    \x01\x1a\x1c\x20ServiceB\x20leading\x20comment\x201\n\"\x1d\x20ServiceB\
    \x20trailing\x20comment\x201\n\n\n\n\x03\x06\x01\x01\x12\x03?\x08\x10\nH\
    \n\x04\x06\x01\x02\0\x12\x03C\x02+\x1a\x1c\x20MethodB1\x20leading\x20com\
    ment\x201\n\"\x1d\x20MethodB1\x20trailing\x20comment\x201\n\n\x0c\n\x05\
    \x06\x01\x02\0\x01\x12\x03C\x06\x0e\n\x0c\n\x05\x06\x01\x02\0\x02\x12\
    \x03C\x0f\x16\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x03C!)b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
