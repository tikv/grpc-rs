// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `istio_echo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.EchoRequest)
pub struct EchoRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.EchoRequest.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.EchoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EchoRequest {
    fn default() -> &'a EchoRequest {
        <EchoRequest as ::protobuf::Message>::default_instance()
    }
}

impl EchoRequest {
    pub fn new() -> EchoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &EchoRequest| { &m.message },
            |m: &mut EchoRequest| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EchoRequest>(
            "EchoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EchoRequest {
    const NAME: &'static str = "EchoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EchoRequest {
        EchoRequest::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EchoRequest {
        static instance: EchoRequest = EchoRequest {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EchoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EchoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EchoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EchoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.EchoResponse)
pub struct EchoResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.EchoResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.EchoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EchoResponse {
    fn default() -> &'a EchoResponse {
        <EchoResponse as ::protobuf::Message>::default_instance()
    }
}

impl EchoResponse {
    pub fn new() -> EchoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &EchoResponse| { &m.message },
            |m: &mut EchoResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EchoResponse>(
            "EchoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EchoResponse {
    const NAME: &'static str = "EchoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EchoResponse {
        EchoResponse::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EchoResponse {
        static instance: EchoResponse = EchoResponse {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EchoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EchoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EchoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EchoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Header)
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:proto.Header.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:proto.Header.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Header| { &m.key },
            |m: &mut Header| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Header| { &m.value },
            |m: &mut Header| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            key: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ForwardEchoRequest)
pub struct ForwardEchoRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.count)
    pub count: i32,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.qps)
    pub qps: i32,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.timeout_micros)
    pub timeout_micros: i64,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.headers)
    pub headers: ::std::vec::Vec<Header>,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.message)
    pub message: ::std::string::String,
    ///  Method for the request. Valid only for HTTP
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.method)
    pub method: ::std::string::String,
    ///  If true, requests will be sent using h2c prior knowledge
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.http2)
    pub http2: bool,
    ///  If true, requests will be sent using http3
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.http3)
    pub http3: bool,
    ///  If true, requests will not be sent until magic string is received
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.serverFirst)
    pub serverFirst: bool,
    ///  If true, 301 redirects will be followed
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.followRedirects)
    pub followRedirects: bool,
    ///  If non-empty, make the request with the corresponding cert and key.
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.cert)
    pub cert: ::std::string::String,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.key)
    pub key: ::std::string::String,
    ///  If non-empty, verify the server CA
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.caCert)
    pub caCert: ::std::string::String,
    ///  If non-empty, make the request with the corresponding cert and key file.
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.certFile)
    pub certFile: ::std::string::String,
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.keyFile)
    pub keyFile: ::std::string::String,
    ///  If non-empty, verify the server CA with the ca cert file.
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.caCertFile)
    pub caCertFile: ::std::string::String,
    ///  Skip verifying peer's certificate.
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.insecureSkipVerify)
    pub insecureSkipVerify: bool,
    ///  List of ALPNs to present. If not set, this will be automatically be set based on the protocol
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.alpn)
    pub alpn: ::protobuf::MessageField<Alpn>,
    ///  Server name (SNI) to present in TLS connections. If not set, Host will be used for http requests.
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.serverName)
    pub serverName: ::std::string::String,
    ///  Expected response determines what string to look for in the response to validate TCP requests succeeded.
    ///  If not set, defaults to "StatusCode=200"
    // @@protoc_insertion_point(field:proto.ForwardEchoRequest.expectedResponse)
    pub expectedResponse: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ForwardEchoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ForwardEchoRequest {
    fn default() -> &'a ForwardEchoRequest {
        <ForwardEchoRequest as ::protobuf::Message>::default_instance()
    }
}

impl ForwardEchoRequest {
    pub fn new() -> ForwardEchoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &ForwardEchoRequest| { &m.count },
            |m: &mut ForwardEchoRequest| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "qps",
            |m: &ForwardEchoRequest| { &m.qps },
            |m: &mut ForwardEchoRequest| { &mut m.qps },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout_micros",
            |m: &ForwardEchoRequest| { &m.timeout_micros },
            |m: &mut ForwardEchoRequest| { &mut m.timeout_micros },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &ForwardEchoRequest| { &m.url },
            |m: &mut ForwardEchoRequest| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "headers",
            |m: &ForwardEchoRequest| { &m.headers },
            |m: &mut ForwardEchoRequest| { &mut m.headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ForwardEchoRequest| { &m.message },
            |m: &mut ForwardEchoRequest| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &ForwardEchoRequest| { &m.method },
            |m: &mut ForwardEchoRequest| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "http2",
            |m: &ForwardEchoRequest| { &m.http2 },
            |m: &mut ForwardEchoRequest| { &mut m.http2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "http3",
            |m: &ForwardEchoRequest| { &m.http3 },
            |m: &mut ForwardEchoRequest| { &mut m.http3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serverFirst",
            |m: &ForwardEchoRequest| { &m.serverFirst },
            |m: &mut ForwardEchoRequest| { &mut m.serverFirst },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "followRedirects",
            |m: &ForwardEchoRequest| { &m.followRedirects },
            |m: &mut ForwardEchoRequest| { &mut m.followRedirects },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cert",
            |m: &ForwardEchoRequest| { &m.cert },
            |m: &mut ForwardEchoRequest| { &mut m.cert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ForwardEchoRequest| { &m.key },
            |m: &mut ForwardEchoRequest| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "caCert",
            |m: &ForwardEchoRequest| { &m.caCert },
            |m: &mut ForwardEchoRequest| { &mut m.caCert },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "certFile",
            |m: &ForwardEchoRequest| { &m.certFile },
            |m: &mut ForwardEchoRequest| { &mut m.certFile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keyFile",
            |m: &ForwardEchoRequest| { &m.keyFile },
            |m: &mut ForwardEchoRequest| { &mut m.keyFile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "caCertFile",
            |m: &ForwardEchoRequest| { &m.caCertFile },
            |m: &mut ForwardEchoRequest| { &mut m.caCertFile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "insecureSkipVerify",
            |m: &ForwardEchoRequest| { &m.insecureSkipVerify },
            |m: &mut ForwardEchoRequest| { &mut m.insecureSkipVerify },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Alpn>(
            "alpn",
            |m: &ForwardEchoRequest| { &m.alpn },
            |m: &mut ForwardEchoRequest| { &mut m.alpn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serverName",
            |m: &ForwardEchoRequest| { &m.serverName },
            |m: &mut ForwardEchoRequest| { &mut m.serverName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "expectedResponse",
            |m: &ForwardEchoRequest| { &m.expectedResponse },
            |m: &mut ForwardEchoRequest| { &mut m.expectedResponse },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ForwardEchoRequest>(
            "ForwardEchoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ForwardEchoRequest {
    const NAME: &'static str = "ForwardEchoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = is.read_int32()?;
                },
                16 => {
                    self.qps = is.read_int32()?;
                },
                24 => {
                    self.timeout_micros = is.read_int64()?;
                },
                34 => {
                    self.url = is.read_string()?;
                },
                42 => {
                    self.headers.push(is.read_message()?);
                },
                50 => {
                    self.message = is.read_string()?;
                },
                74 => {
                    self.method = is.read_string()?;
                },
                56 => {
                    self.http2 = is.read_bool()?;
                },
                120 => {
                    self.http3 = is.read_bool()?;
                },
                64 => {
                    self.serverFirst = is.read_bool()?;
                },
                112 => {
                    self.followRedirects = is.read_bool()?;
                },
                82 => {
                    self.cert = is.read_string()?;
                },
                90 => {
                    self.key = is.read_string()?;
                },
                98 => {
                    self.caCert = is.read_string()?;
                },
                130 => {
                    self.certFile = is.read_string()?;
                },
                138 => {
                    self.keyFile = is.read_string()?;
                },
                146 => {
                    self.caCertFile = is.read_string()?;
                },
                152 => {
                    self.insecureSkipVerify = is.read_bool()?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.alpn)?;
                },
                162 => {
                    self.serverName = is.read_string()?;
                },
                170 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expectedResponse)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.count);
        }
        if self.qps != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.qps);
        }
        if self.timeout_micros != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timeout_micros);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.url);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.message);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.method);
        }
        if self.http2 != false {
            my_size += 1 + 1;
        }
        if self.http3 != false {
            my_size += 1 + 1;
        }
        if self.serverFirst != false {
            my_size += 1 + 1;
        }
        if self.followRedirects != false {
            my_size += 1 + 1;
        }
        if !self.cert.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cert);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.key);
        }
        if !self.caCert.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.caCert);
        }
        if !self.certFile.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.certFile);
        }
        if !self.keyFile.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.keyFile);
        }
        if !self.caCertFile.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.caCertFile);
        }
        if self.insecureSkipVerify != false {
            my_size += 2 + 1;
        }
        if let Some(v) = self.alpn.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.serverName.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.serverName);
        }
        if let Some(v) = self.expectedResponse.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.count != 0 {
            os.write_int32(1, self.count)?;
        }
        if self.qps != 0 {
            os.write_int32(2, self.qps)?;
        }
        if self.timeout_micros != 0 {
            os.write_int64(3, self.timeout_micros)?;
        }
        if !self.url.is_empty() {
            os.write_string(4, &self.url)?;
        }
        for v in &self.headers {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.message.is_empty() {
            os.write_string(6, &self.message)?;
        }
        if !self.method.is_empty() {
            os.write_string(9, &self.method)?;
        }
        if self.http2 != false {
            os.write_bool(7, self.http2)?;
        }
        if self.http3 != false {
            os.write_bool(15, self.http3)?;
        }
        if self.serverFirst != false {
            os.write_bool(8, self.serverFirst)?;
        }
        if self.followRedirects != false {
            os.write_bool(14, self.followRedirects)?;
        }
        if !self.cert.is_empty() {
            os.write_string(10, &self.cert)?;
        }
        if !self.key.is_empty() {
            os.write_string(11, &self.key)?;
        }
        if !self.caCert.is_empty() {
            os.write_string(12, &self.caCert)?;
        }
        if !self.certFile.is_empty() {
            os.write_string(16, &self.certFile)?;
        }
        if !self.keyFile.is_empty() {
            os.write_string(17, &self.keyFile)?;
        }
        if !self.caCertFile.is_empty() {
            os.write_string(18, &self.caCertFile)?;
        }
        if self.insecureSkipVerify != false {
            os.write_bool(19, self.insecureSkipVerify)?;
        }
        if let Some(v) = self.alpn.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if !self.serverName.is_empty() {
            os.write_string(20, &self.serverName)?;
        }
        if let Some(v) = self.expectedResponse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ForwardEchoRequest {
        ForwardEchoRequest::new()
    }

    fn clear(&mut self) {
        self.count = 0;
        self.qps = 0;
        self.timeout_micros = 0;
        self.url.clear();
        self.headers.clear();
        self.message.clear();
        self.method.clear();
        self.http2 = false;
        self.http3 = false;
        self.serverFirst = false;
        self.followRedirects = false;
        self.cert.clear();
        self.key.clear();
        self.caCert.clear();
        self.certFile.clear();
        self.keyFile.clear();
        self.caCertFile.clear();
        self.insecureSkipVerify = false;
        self.alpn.clear();
        self.serverName.clear();
        self.expectedResponse.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ForwardEchoRequest {
        static instance: ForwardEchoRequest = ForwardEchoRequest {
            count: 0,
            qps: 0,
            timeout_micros: 0,
            url: ::std::string::String::new(),
            headers: ::std::vec::Vec::new(),
            message: ::std::string::String::new(),
            method: ::std::string::String::new(),
            http2: false,
            http3: false,
            serverFirst: false,
            followRedirects: false,
            cert: ::std::string::String::new(),
            key: ::std::string::String::new(),
            caCert: ::std::string::String::new(),
            certFile: ::std::string::String::new(),
            keyFile: ::std::string::String::new(),
            caCertFile: ::std::string::String::new(),
            insecureSkipVerify: false,
            alpn: ::protobuf::MessageField::none(),
            serverName: ::std::string::String::new(),
            expectedResponse: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ForwardEchoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ForwardEchoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ForwardEchoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ForwardEchoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Alpn)
pub struct Alpn {
    // message fields
    // @@protoc_insertion_point(field:proto.Alpn.value)
    pub value: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Alpn.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Alpn {
    fn default() -> &'a Alpn {
        <Alpn as ::protobuf::Message>::default_instance()
    }
}

impl Alpn {
    pub fn new() -> Alpn {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &Alpn| { &m.value },
            |m: &mut Alpn| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Alpn>(
            "Alpn",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Alpn {
    const NAME: &'static str = "Alpn";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Alpn {
        Alpn::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Alpn {
        static instance: Alpn = Alpn {
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Alpn {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Alpn").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Alpn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Alpn {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ForwardEchoResponse)
pub struct ForwardEchoResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.ForwardEchoResponse.output)
    pub output: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ForwardEchoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ForwardEchoResponse {
    fn default() -> &'a ForwardEchoResponse {
        <ForwardEchoResponse as ::protobuf::Message>::default_instance()
    }
}

impl ForwardEchoResponse {
    pub fn new() -> ForwardEchoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "output",
            |m: &ForwardEchoResponse| { &m.output },
            |m: &mut ForwardEchoResponse| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ForwardEchoResponse>(
            "ForwardEchoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ForwardEchoResponse {
    const NAME: &'static str = "ForwardEchoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.output.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.output {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.output {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ForwardEchoResponse {
        ForwardEchoResponse::new()
    }

    fn clear(&mut self) {
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ForwardEchoResponse {
        static instance: ForwardEchoResponse = ForwardEchoResponse {
            output: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ForwardEchoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ForwardEchoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ForwardEchoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ForwardEchoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10istio_echo.proto\x12\x05proto\x1a\x1egoogle/protobuf/wrappers.prot\
    o\"'\n\x0bEchoRequest\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07messag\
    e\"(\n\x0cEchoResponse\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07messa\
    ge\"0\n\x06Header\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\"\x97\x05\n\x12ForwardEchoRequest\
    \x12\x14\n\x05count\x18\x01\x20\x01(\x05R\x05count\x12\x10\n\x03qps\x18\
    \x02\x20\x01(\x05R\x03qps\x12%\n\x0etimeout_micros\x18\x03\x20\x01(\x03R\
    \rtimeoutMicros\x12\x10\n\x03url\x18\x04\x20\x01(\tR\x03url\x12'\n\x07he\
    aders\x18\x05\x20\x03(\x0b2\r.proto.HeaderR\x07headers\x12\x18\n\x07mess\
    age\x18\x06\x20\x01(\tR\x07message\x12\x16\n\x06method\x18\t\x20\x01(\tR\
    \x06method\x12\x14\n\x05http2\x18\x07\x20\x01(\x08R\x05http2\x12\x14\n\
    \x05http3\x18\x0f\x20\x01(\x08R\x05http3\x12\x20\n\x0bserverFirst\x18\
    \x08\x20\x01(\x08R\x0bserverFirst\x12(\n\x0ffollowRedirects\x18\x0e\x20\
    \x01(\x08R\x0ffollowRedirects\x12\x12\n\x04cert\x18\n\x20\x01(\tR\x04cer\
    t\x12\x10\n\x03key\x18\x0b\x20\x01(\tR\x03key\x12\x16\n\x06caCert\x18\
    \x0c\x20\x01(\tR\x06caCert\x12\x1a\n\x08certFile\x18\x10\x20\x01(\tR\x08\
    certFile\x12\x18\n\x07keyFile\x18\x11\x20\x01(\tR\x07keyFile\x12\x1e\n\n\
    caCertFile\x18\x12\x20\x01(\tR\ncaCertFile\x12.\n\x12insecureSkipVerify\
    \x18\x13\x20\x01(\x08R\x12insecureSkipVerify\x12\x1f\n\x04alpn\x18\r\x20\
    \x01(\x0b2\x0b.proto.AlpnR\x04alpn\x12\x1e\n\nserverName\x18\x14\x20\x01\
    (\tR\nserverName\x12H\n\x10expectedResponse\x18\x15\x20\x01(\x0b2\x1c.go\
    ogle.protobuf.StringValueR\x10expectedResponse\"\x1c\n\x04Alpn\x12\x14\n\
    \x05value\x18\x01\x20\x03(\tR\x05value\"-\n\x13ForwardEchoResponse\x12\
    \x16\n\x06output\x18\x01\x20\x03(\tR\x06output2\x88\x01\n\x0fEchoTestSer\
    vice\x12/\n\x04Echo\x12\x12.proto.EchoRequest\x1a\x13.proto.EchoResponse\
    \x12D\n\x0bForwardEcho\x12\x19.proto.ForwardEchoRequest\x1a\x1a.proto.Fo\
    rwardEchoResponseJ\xef\x19\n\x06\x12\x04\x0e\0R\x01\n\xbf\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xb4\x04\x20Copyright\x202022\x20gRPC\x20authors.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\t\n\x02\x03\0\x12\x03\x10\0(\n\x08\n\x01\x02\x12\x03\x12\0\x0e\
    \n\n\n\x02\x06\0\x12\x04\x14\0\x17\x01\n\n\n\x03\x06\0\x01\x12\x03\x14\
    \x08\x17\n\x0b\n\x04\x06\0\x02\0\x12\x03\x15\x020\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x15\x06\n\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x15\x0c\x17\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x15\".\n\x0b\n\x04\x06\0\x02\x01\
    \x12\x03\x16\x02E\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x16\x06\x11\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x16\x13%\n\x0c\n\x05\x06\0\x02\x01\
    \x03\x12\x03\x160C\n\n\n\x02\x04\0\x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x19\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1a\x02\x15\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1a\x13\x14\n\
    \n\n\x02\x04\x01\x12\x04\x1d\0\x1f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1d\
    \x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1e\x02\x15\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x1e\t\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1e\x13\x14\n\n\n\x02\
    \x04\x02\x12\x04!\0$\x01\n\n\n\x03\x04\x02\x01\x12\x03!\x08\x0e\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\"\x02\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\"\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\"\t\x0c\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\"\x0f\x10\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    #\x02\x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03#\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03#\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03#\x11\x12\n\n\n\x02\x04\x03\x12\x04&\0J\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03&\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\x03'\x02\x12\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03'\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03'\x08\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03'\x10\x11\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03(\x02\x10\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03(\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03(\x08\x0b\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03(\x0e\x0f\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03)\x02\x1b\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03)\x02\x07\n\x0c\
    \n\x05\x04\x03\x02\x02\x01\x12\x03)\x08\x16\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03)\x19\x1a\n\x0b\n\x04\x04\x03\x02\x03\x12\x03*\x02\x11\n\x0c\
    \n\x05\x04\x03\x02\x03\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03*\t\x0c\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03*\x0f\x10\n\
    \x0b\n\x04\x04\x03\x02\x04\x12\x03+\x02\x1e\n\x0c\n\x05\x04\x03\x02\x04\
    \x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x03\x02\x04\x06\x12\x03+\x0b\x11\n\
    \x0c\n\x05\x04\x03\x02\x04\x01\x12\x03+\x12\x19\n\x0c\n\x05\x04\x03\x02\
    \x04\x03\x12\x03+\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x05\x12\x03,\x02\x15\n\
    \x0c\n\x05\x04\x03\x02\x05\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x05\x01\x12\x03,\t\x10\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03,\x13\x14\
    \n:\n\x04\x04\x03\x02\x06\x12\x03.\x02\x14\x1a-\x20Method\x20for\x20the\
    \x20request.\x20Valid\x20only\x20for\x20HTTP\n\n\x0c\n\x05\x04\x03\x02\
    \x06\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03.\t\x0f\
    \n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03.\x12\x13\nG\n\x04\x04\x03\x02\
    \x07\x12\x030\x02\x11\x1a:\x20If\x20true,\x20requests\x20will\x20be\x20s\
    ent\x20using\x20h2c\x20prior\x20knowledge\n\n\x0c\n\x05\x04\x03\x02\x07\
    \x05\x12\x030\x02\x06\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x030\x07\x0c\n\
    \x0c\n\x05\x04\x03\x02\x07\x03\x12\x030\x0f\x10\n9\n\x04\x04\x03\x02\x08\
    \x12\x032\x02\x12\x1a,\x20If\x20true,\x20requests\x20will\x20be\x20sent\
    \x20using\x20http3\n\n\x0c\n\x05\x04\x03\x02\x08\x05\x12\x032\x02\x06\n\
    \x0c\n\x05\x04\x03\x02\x08\x01\x12\x032\x07\x0c\n\x0c\n\x05\x04\x03\x02\
    \x08\x03\x12\x032\x0f\x11\nP\n\x04\x04\x03\x02\t\x12\x034\x02\x17\x1aC\
    \x20If\x20true,\x20requests\x20will\x20not\x20be\x20sent\x20until\x20mag\
    ic\x20string\x20is\x20received\n\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x034\
    \x02\x06\n\x0c\n\x05\x04\x03\x02\t\x01\x12\x034\x07\x12\n\x0c\n\x05\x04\
    \x03\x02\t\x03\x12\x034\x15\x16\n6\n\x04\x04\x03\x02\n\x12\x036\x02\x1c\
    \x1a)\x20If\x20true,\x20301\x20redirects\x20will\x20be\x20followed\n\n\
    \x0c\n\x05\x04\x03\x02\n\x05\x12\x036\x02\x06\n\x0c\n\x05\x04\x03\x02\n\
    \x01\x12\x036\x07\x16\n\x0c\n\x05\x04\x03\x02\n\x03\x12\x036\x19\x1b\nR\
    \n\x04\x04\x03\x02\x0b\x12\x038\x02\x13\x1aE\x20If\x20non-empty,\x20make\
    \x20the\x20request\x20with\x20the\x20corresponding\x20cert\x20and\x20key\
    .\n\n\x0c\n\x05\x04\x03\x02\x0b\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x0b\x01\x12\x038\t\r\n\x0c\n\x05\x04\x03\x02\x0b\x03\x12\x038\x10\
    \x12\n\x0b\n\x04\x04\x03\x02\x0c\x12\x039\x02\x12\n\x0c\n\x05\x04\x03\
    \x02\x0c\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\x03\x02\x0c\x01\x12\x039\t\
    \x0c\n\x0c\n\x05\x04\x03\x02\x0c\x03\x12\x039\x0f\x11\n1\n\x04\x04\x03\
    \x02\r\x12\x03;\x02\x15\x1a$\x20If\x20non-empty,\x20verify\x20the\x20ser\
    ver\x20CA\n\n\x0c\n\x05\x04\x03\x02\r\x05\x12\x03;\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\r\x01\x12\x03;\t\x0f\n\x0c\n\x05\x04\x03\x02\r\x03\x12\x03;\
    \x12\x14\nW\n\x04\x04\x03\x02\x0e\x12\x03=\x02\x17\x1aJ\x20If\x20non-emp\
    ty,\x20make\x20the\x20request\x20with\x20the\x20corresponding\x20cert\
    \x20and\x20key\x20file.\n\n\x0c\n\x05\x04\x03\x02\x0e\x05\x12\x03=\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\x0e\x01\x12\x03=\t\x11\n\x0c\n\x05\x04\x03\
    \x02\x0e\x03\x12\x03=\x14\x16\n\x0b\n\x04\x04\x03\x02\x0f\x12\x03>\x02\
    \x16\n\x0c\n\x05\x04\x03\x02\x0f\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x0f\x01\x12\x03>\t\x10\n\x0c\n\x05\x04\x03\x02\x0f\x03\x12\x03>\
    \x13\x15\nH\n\x04\x04\x03\x02\x10\x12\x03@\x02\x19\x1a;\x20If\x20non-emp\
    ty,\x20verify\x20the\x20server\x20CA\x20with\x20the\x20ca\x20cert\x20fil\
    e.\n\n\x0c\n\x05\x04\x03\x02\x10\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x10\x01\x12\x03@\t\x13\n\x0c\n\x05\x04\x03\x02\x10\x03\x12\x03@\
    \x16\x18\n1\n\x04\x04\x03\x02\x11\x12\x03B\x02\x1f\x1a$\x20Skip\x20verif\
    ying\x20peer's\x20certificate.\n\n\x0c\n\x05\x04\x03\x02\x11\x05\x12\x03\
    B\x02\x06\n\x0c\n\x05\x04\x03\x02\x11\x01\x12\x03B\x07\x19\n\x0c\n\x05\
    \x04\x03\x02\x11\x03\x12\x03B\x1c\x1e\nl\n\x04\x04\x03\x02\x12\x12\x03D\
    \x02\x11\x1a_\x20List\x20of\x20ALPNs\x20to\x20present.\x20If\x20not\x20s\
    et,\x20this\x20will\x20be\x20automatically\x20be\x20set\x20based\x20on\
    \x20the\x20protocol\n\n\x0c\n\x05\x04\x03\x02\x12\x06\x12\x03D\x02\x06\n\
    \x0c\n\x05\x04\x03\x02\x12\x01\x12\x03D\x07\x0b\n\x0c\n\x05\x04\x03\x02\
    \x12\x03\x12\x03D\x0e\x10\np\n\x04\x04\x03\x02\x13\x12\x03F\x02\x19\x1ac\
    \x20Server\x20name\x20(SNI)\x20to\x20present\x20in\x20TLS\x20connections\
    .\x20If\x20not\x20set,\x20Host\x20will\x20be\x20used\x20for\x20http\x20r\
    equests.\n\n\x0c\n\x05\x04\x03\x02\x13\x05\x12\x03F\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x13\x01\x12\x03F\t\x13\n\x0c\n\x05\x04\x03\x02\x13\x03\x12\
    \x03F\x16\x18\n\xa2\x01\n\x04\x04\x03\x02\x14\x12\x03I\x024\x1a\x94\x01\
    \x20Expected\x20response\x20determines\x20what\x20string\x20to\x20look\
    \x20for\x20in\x20the\x20response\x20to\x20validate\x20TCP\x20requests\
    \x20succeeded.\n\x20If\x20not\x20set,\x20defaults\x20to\x20\"StatusCode=\
    200\"\n\n\x0c\n\x05\x04\x03\x02\x14\x06\x12\x03I\x02\x1d\n\x0c\n\x05\x04\
    \x03\x02\x14\x01\x12\x03I\x1e.\n\x0c\n\x05\x04\x03\x02\x14\x03\x12\x03I1\
    3\n\n\n\x02\x04\x04\x12\x04L\0N\x01\n\n\n\x03\x04\x04\x01\x12\x03L\x08\
    \x0c\n\x0b\n\x04\x04\x04\x02\0\x12\x03M\x02\x1c\n\x0c\n\x05\x04\x04\x02\
    \0\x04\x12\x03M\x02\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03M\x0b\x11\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03M\x12\x17\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03M\x1a\x1b\n\n\n\x02\x04\x05\x12\x04P\0R\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03P\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03Q\x02\x1d\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03Q\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03Q\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03Q\x12\x18\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03Q\x1b\x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(EchoRequest::generated_message_descriptor_data());
            messages.push(EchoResponse::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(ForwardEchoRequest::generated_message_descriptor_data());
            messages.push(Alpn::generated_message_descriptor_data());
            messages.push(ForwardEchoResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
