// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `services.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eservices.proto\x12\x0cgrpc.testing\x1a\x0emessages.proto\x1a\rcont\
    rol.proto\x1a\x0bstats.proto2\xa6\x03\n\x10BenchmarkService\x12F\n\tUnar\
    yCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleResp\
    onse\x12N\n\rStreamingCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.gr\
    pc.testing.SimpleResponse(\x010\x01\x12R\n\x13StreamingFromClient\x12\
    \x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleResponse(\x01\
    \x12R\n\x13StreamingFromServer\x12\x1b.grpc.testing.SimpleRequest\x1a\
    \x1c.grpc.testing.SimpleResponse0\x01\x12R\n\x11StreamingBothWays\x12\
    \x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleResponse(\x01\
    0\x012\x97\x02\n\rWorkerService\x12E\n\tRunServer\x12\x18.grpc.testing.S\
    erverArgs\x1a\x1a.grpc.testing.ServerStatus(\x010\x01\x12E\n\tRunClient\
    \x12\x18.grpc.testing.ClientArgs\x1a\x1a.grpc.testing.ClientStatus(\x010\
    \x01\x12B\n\tCoreCount\x12\x19.grpc.testing.CoreRequest\x1a\x1a.grpc.tes\
    ting.CoreResponse\x124\n\nQuitWorker\x12\x12.grpc.testing.Void\x1a\x12.g\
    rpc.testing.Void2^\n\x18ReportQpsScenarioService\x12B\n\x0eReportScenari\
    o\x12\x1c.grpc.testing.ScenarioResult\x1a\x12.grpc.testing.VoidJ\xf4\x16\
    \n\x06\x12\x04\x10\0J\x01\n\xb8\x05\n\x01\x0c\x12\x03\x10\0\x12\x1aw\x20\
    An\x20integration\x20test\x20service\x20that\x20covers\x20all\x20the\x20\
    method\x20signature\x20permutations\n\x20of\x20unary/streaming\x20reques\
    ts/responses.\n2\xb4\x04\x20Copyright\x202015\x20gRPC\x20authors.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\t\n\x02\x03\0\x12\x03\x12\0\x18\n\t\n\x02\x03\x01\x12\x03\x13\0\
    \x17\n\t\n\x02\x03\x02\x12\x03\x14\0\x15\n\x08\n\x01\x02\x12\x03\x16\0\
    \x15\n\n\n\x02\x06\0\x12\x04\x18\0-\x01\n\n\n\x03\x06\0\x01\x12\x03\x18\
    \x08\x18\nb\n\x04\x06\0\x02\0\x12\x03\x1b\x028\x1aU\x20One\x20request\
    \x20followed\x20by\x20one\x20response.\n\x20The\x20server\x20returns\x20\
    the\x20client\x20payload\x20as-is.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x1b\x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x1b\x10\x1d\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x1b(6\n\xae\x01\n\x04\x06\0\x02\x01\x12\x03\x20\
    \x02J\x1a\xa0\x01\x20Repeated\x20sequence\x20of\x20one\x20request\x20fol\
    lowed\x20by\x20one\x20response.\n\x20Should\x20be\x20called\x20streaming\
    \x20ping-pong\n\x20The\x20server\x20returns\x20the\x20client\x20payload\
    \x20as-is\x20on\x20each\x20response\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x20\x06\x13\n\x0c\n\x05\x06\0\x02\x01\x05\x12\x03\x20\x14\x1a\n\x0c\
    \n\x05\x06\0\x02\x01\x02\x12\x03\x20\x1b(\n\x0c\n\x05\x06\0\x02\x01\x06\
    \x12\x03\x2039\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x20:H\n\x93\x01\n\
    \x04\x06\0\x02\x02\x12\x03$\x02I\x1a\x85\x01\x20Single-sided\x20unbounde\
    d\x20streaming\x20from\x20client\x20to\x20server\n\x20The\x20server\x20r\
    eturns\x20the\x20client\x20payload\x20as-is\x20once\x20the\x20client\x20\
    does\x20WritesDone\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03$\x06\x19\n\
    \x0c\n\x05\x06\0\x02\x02\x05\x12\x03$\x1a\x20\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03$!.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03$9G\n}\n\x04\x06\0\
    \x02\x03\x12\x03(\x02I\x1ap\x20Single-sided\x20unbounded\x20streaming\
    \x20from\x20server\x20to\x20client\n\x20The\x20server\x20repeatedly\x20r\
    eturns\x20the\x20client\x20payload\x20as-is\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03(\x06\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03(\x1a'\n\x0c\
    \n\x05\x06\0\x02\x03\x06\x12\x03(28\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03(9G\n\x83\x01\n\x04\x06\0\x02\x04\x12\x03,\x02N\x1av\x20Two-sided\
    \x20unbounded\x20streaming\x20between\x20server\x20to\x20client\n\x20Bot\
    h\x20sides\x20send\x20the\x20content\x20of\x20their\x20own\x20choice\x20\
    to\x20the\x20other\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03,\x06\x17\n\
    \x0c\n\x05\x06\0\x02\x04\x05\x12\x03,\x18\x1e\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03,\x1f,\n\x0c\n\x05\x06\0\x02\x04\x06\x12\x03,7=\n\x0c\n\x05\
    \x06\0\x02\x04\x03\x12\x03,>L\n\n\n\x02\x06\x01\x12\x04/\0E\x01\n\n\n\
    \x03\x06\x01\x01\x12\x03/\x08\x15\n\xdf\x02\n\x04\x06\x01\x02\0\x12\x036\
    \x02A\x1a\xd1\x02\x20Start\x20server\x20with\x20specified\x20workload.\n\
    \x20First\x20request\x20sent\x20specifies\x20the\x20ServerConfig\x20foll\
    owed\x20by\x20ServerStatus\n\x20response.\x20After\x20that,\x20a\x20\"Ma\
    rk\"\x20can\x20be\x20sent\x20anytime\x20to\x20request\x20the\x20latest\n\
    \x20stats.\x20Closing\x20the\x20stream\x20will\x20initiate\x20shutdown\
    \x20of\x20the\x20test\x20server\n\x20and\x20once\x20the\x20shutdown\x20h\
    as\x20finished,\x20the\x20OK\x20status\x20is\x20sent\x20to\x20terminate\
    \n\x20this\x20RPC.\n\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x036\x06\x0f\n\
    \x0c\n\x05\x06\x01\x02\0\x05\x12\x036\x10\x16\n\x0c\n\x05\x06\x01\x02\0\
    \x02\x12\x036\x17!\n\x0c\n\x05\x06\x01\x02\0\x06\x12\x036,2\n\x0c\n\x05\
    \x06\x01\x02\0\x03\x12\x0363?\n\xdf\x02\n\x04\x06\x01\x02\x01\x12\x03>\
    \x02A\x1a\xd1\x02\x20Start\x20client\x20with\x20specified\x20workload.\n\
    \x20First\x20request\x20sent\x20specifies\x20the\x20ClientConfig\x20foll\
    owed\x20by\x20ClientStatus\n\x20response.\x20After\x20that,\x20a\x20\"Ma\
    rk\"\x20can\x20be\x20sent\x20anytime\x20to\x20request\x20the\x20latest\n\
    \x20stats.\x20Closing\x20the\x20stream\x20will\x20initiate\x20shutdown\
    \x20of\x20the\x20test\x20client\n\x20and\x20once\x20the\x20shutdown\x20h\
    as\x20finished,\x20the\x20OK\x20status\x20is\x20sent\x20to\x20terminate\
    \n\x20this\x20RPC.\n\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03>\x06\x0f\n\
    \x0c\n\x05\x06\x01\x02\x01\x05\x12\x03>\x10\x16\n\x0c\n\x05\x06\x01\x02\
    \x01\x02\x12\x03>\x17!\n\x0c\n\x05\x06\x01\x02\x01\x06\x12\x03>,2\n\x0c\
    \n\x05\x06\x01\x02\x01\x03\x12\x03>3?\n6\n\x04\x06\x01\x02\x02\x12\x03A\
    \x024\x1a)\x20Just\x20return\x20the\x20core\x20count\x20-\x20unary\x20ca\
    ll\n\n\x0c\n\x05\x06\x01\x02\x02\x01\x12\x03A\x06\x0f\n\x0c\n\x05\x06\
    \x01\x02\x02\x02\x12\x03A\x10\x1b\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\
    \x03A&2\n\x1f\n\x04\x06\x01\x02\x03\x12\x03D\x02&\x1a\x12\x20Quit\x20thi\
    s\x20worker\n\n\x0c\n\x05\x06\x01\x02\x03\x01\x12\x03D\x06\x10\n\x0c\n\
    \x05\x06\x01\x02\x03\x02\x12\x03D\x11\x15\n\x0c\n\x05\x06\x01\x02\x03\
    \x03\x12\x03D\x20$\n\n\n\x02\x06\x02\x12\x04G\0J\x01\n\n\n\x03\x06\x02\
    \x01\x12\x03G\x08\x20\n?\n\x04\x06\x02\x02\0\x12\x03I\x024\x1a2\x20Repor\
    t\x20results\x20of\x20a\x20QPS\x20test\x20benchmark\x20scenario.\n\n\x0c\
    \n\x05\x06\x02\x02\0\x01\x12\x03I\x06\x14\n\x0c\n\x05\x06\x02\x02\0\x02\
    \x12\x03I\x15#\n\x0c\n\x05\x06\x02\x02\0\x03\x12\x03I.2b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::messages::file_descriptor().clone());
            deps.push(super::control::file_descriptor().clone());
            deps.push(super::stats::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
