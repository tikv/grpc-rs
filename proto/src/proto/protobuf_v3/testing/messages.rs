// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

///  TODO(dgq): Go back to using well-known types once
///  https://github.com/grpc/grpc/issues/6980 has been fixed.
///  import "google/protobuf/wrappers.proto";
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.BoolValue)
pub struct BoolValue {
    // message fields
    ///  The bool value.
    // @@protoc_insertion_point(field:grpc.testing.BoolValue.value)
    pub value: bool,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.BoolValue.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BoolValue {
    fn default() -> &'a BoolValue {
        <BoolValue as ::protobufv3::Message>::default_instance()
    }
}

impl BoolValue {
    pub fn new() -> BoolValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &BoolValue| { &m.value },
            |m: &mut BoolValue| { &mut m.value },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<BoolValue>(
            "BoolValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for BoolValue {
    const NAME: &'static str = "BoolValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value = is.read_bool()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != false {
            my_size += 1 + 1;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.value != false {
            os.write_bool(1, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BoolValue {
        BoolValue::new()
    }

    fn clear(&mut self) {
        self.value = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BoolValue {
        static instance: BoolValue = BoolValue {
            value: false,
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for BoolValue {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BoolValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BoolValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for BoolValue {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A block of data, to simply increase gRPC message size.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.Payload)
pub struct Payload {
    // message fields
    ///  DEPRECATED, don't use. To be removed shortly.
    ///  The type of data in body.
    // @@protoc_insertion_point(field:grpc.testing.Payload.type)
    pub type_: ::protobufv3::EnumOrUnknown<PayloadType>,
    ///  Primary contents of payload.
    // @@protoc_insertion_point(field:grpc.testing.Payload.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.Payload.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Payload {
    fn default() -> &'a Payload {
        <Payload as ::protobufv3::Message>::default_instance()
    }
}

impl Payload {
    pub fn new() -> Payload {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Payload| { &m.type_ },
            |m: &mut Payload| { &mut m.type_ },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &Payload| { &m.body },
            |m: &mut Payload| { &mut m.body },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<Payload>(
            "Payload",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for Payload {
    const NAME: &'static str = "Payload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            my_size += ::protobufv3::rt::int32_size(1, self.type_.value());
        }
        if !self.body.is_empty() {
            my_size += ::protobufv3::rt::bytes_size(2, &self.body);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.type_ != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            os.write_enum(1, ::protobufv3::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.body.is_empty() {
            os.write_bytes(2, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Payload {
        Payload::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE);
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Payload {
        static instance: Payload = Payload {
            type_: ::protobufv3::EnumOrUnknown::from_i32(0),
            body: ::std::vec::Vec::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for Payload {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Payload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for Payload {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A protobuf representation for grpc status. This is used by test
///  clients to specify a status that the server should attempt to return.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.EchoStatus)
pub struct EchoStatus {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.EchoStatus.code)
    pub code: i32,
    // @@protoc_insertion_point(field:grpc.testing.EchoStatus.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.EchoStatus.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EchoStatus {
    fn default() -> &'a EchoStatus {
        <EchoStatus as ::protobufv3::Message>::default_instance()
    }
}

impl EchoStatus {
    pub fn new() -> EchoStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &EchoStatus| { &m.code },
            |m: &mut EchoStatus| { &mut m.code },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &EchoStatus| { &m.message },
            |m: &mut EchoStatus| { &mut m.message },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<EchoStatus>(
            "EchoStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for EchoStatus {
    const NAME: &'static str = "EchoStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_int32()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobufv3::rt::string_size(2, &self.message);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EchoStatus {
        EchoStatus::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EchoStatus {
        static instance: EchoStatus = EchoStatus {
            code: 0,
            message: ::std::string::String::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for EchoStatus {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EchoStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EchoStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for EchoStatus {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Unary request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.SimpleRequest)
pub struct SimpleRequest {
    // message fields
    ///  DEPRECATED, don't use. To be removed shortly.
    ///  Desired payload type in the response from the server.
    ///  If response_type is RANDOM, server randomly chooses one from other formats.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.response_type)
    pub response_type: ::protobufv3::EnumOrUnknown<PayloadType>,
    ///  Desired payload size in the response from the server.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.response_size)
    pub response_size: i32,
    ///  Optional input payload sent along with the request.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.payload)
    pub payload: ::protobufv3::MessageField<Payload>,
    ///  Whether SimpleResponse should include username.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.fill_username)
    pub fill_username: bool,
    ///  Whether SimpleResponse should include OAuth scope.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.fill_oauth_scope)
    pub fill_oauth_scope: bool,
    ///  Whether to request the server to compress the response. This field is
    ///  "nullable" in order to interoperate seamlessly with clients not able to
    ///  implement the full compression tests by introspecting the call to verify
    ///  the response's compression status.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.response_compressed)
    pub response_compressed: ::protobufv3::MessageField<BoolValue>,
    ///  Whether server should return a given status
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.response_status)
    pub response_status: ::protobufv3::MessageField<EchoStatus>,
    ///  Whether the server should expect this request to be compressed.
    // @@protoc_insertion_point(field:grpc.testing.SimpleRequest.expect_compressed)
    pub expect_compressed: ::protobufv3::MessageField<BoolValue>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.SimpleRequest.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimpleRequest {
    fn default() -> &'a SimpleRequest {
        <SimpleRequest as ::protobufv3::Message>::default_instance()
    }
}

impl SimpleRequest {
    pub fn new() -> SimpleRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_type",
            |m: &SimpleRequest| { &m.response_type },
            |m: &mut SimpleRequest| { &mut m.response_type },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_size",
            |m: &SimpleRequest| { &m.response_size },
            |m: &mut SimpleRequest| { &mut m.response_size },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Payload>(
            "payload",
            |m: &SimpleRequest| { &m.payload },
            |m: &mut SimpleRequest| { &mut m.payload },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fill_username",
            |m: &SimpleRequest| { &m.fill_username },
            |m: &mut SimpleRequest| { &mut m.fill_username },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fill_oauth_scope",
            |m: &SimpleRequest| { &m.fill_oauth_scope },
            |m: &mut SimpleRequest| { &mut m.fill_oauth_scope },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, BoolValue>(
            "response_compressed",
            |m: &SimpleRequest| { &m.response_compressed },
            |m: &mut SimpleRequest| { &mut m.response_compressed },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, EchoStatus>(
            "response_status",
            |m: &SimpleRequest| { &m.response_status },
            |m: &mut SimpleRequest| { &mut m.response_status },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, BoolValue>(
            "expect_compressed",
            |m: &SimpleRequest| { &m.expect_compressed },
            |m: &mut SimpleRequest| { &mut m.expect_compressed },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<SimpleRequest>(
            "SimpleRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for SimpleRequest {
    const NAME: &'static str = "SimpleRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.response_size = is.read_int32()?;
                },
                26 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                32 => {
                    self.fill_username = is.read_bool()?;
                },
                40 => {
                    self.fill_oauth_scope = is.read_bool()?;
                },
                50 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.response_compressed)?;
                },
                58 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.response_status)?;
                },
                66 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.expect_compressed)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.response_type != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            my_size += ::protobufv3::rt::int32_size(1, self.response_type.value());
        }
        if self.response_size != 0 {
            my_size += ::protobufv3::rt::int32_size(2, self.response_size);
        }
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if self.fill_username != false {
            my_size += 1 + 1;
        }
        if self.fill_oauth_scope != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.response_compressed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.response_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.expect_compressed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.response_type != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            os.write_enum(1, ::protobufv3::EnumOrUnknown::value(&self.response_type))?;
        }
        if self.response_size != 0 {
            os.write_int32(2, self.response_size)?;
        }
        if let Some(v) = self.payload.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.fill_username != false {
            os.write_bool(4, self.fill_username)?;
        }
        if self.fill_oauth_scope != false {
            os.write_bool(5, self.fill_oauth_scope)?;
        }
        if let Some(v) = self.response_compressed.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.response_status.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.expect_compressed.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimpleRequest {
        SimpleRequest::new()
    }

    fn clear(&mut self) {
        self.response_type = ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE);
        self.response_size = 0;
        self.payload.clear();
        self.fill_username = false;
        self.fill_oauth_scope = false;
        self.response_compressed.clear();
        self.response_status.clear();
        self.expect_compressed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimpleRequest {
        static instance: SimpleRequest = SimpleRequest {
            response_type: ::protobufv3::EnumOrUnknown::from_i32(0),
            response_size: 0,
            payload: ::protobufv3::MessageField::none(),
            fill_username: false,
            fill_oauth_scope: false,
            response_compressed: ::protobufv3::MessageField::none(),
            response_status: ::protobufv3::MessageField::none(),
            expect_compressed: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for SimpleRequest {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimpleRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimpleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for SimpleRequest {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Unary response, as configured by the request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.SimpleResponse)
pub struct SimpleResponse {
    // message fields
    ///  Payload to increase message size.
    // @@protoc_insertion_point(field:grpc.testing.SimpleResponse.payload)
    pub payload: ::protobufv3::MessageField<Payload>,
    ///  The user the request came from, for verifying authentication was
    ///  successful when the client expected it.
    // @@protoc_insertion_point(field:grpc.testing.SimpleResponse.username)
    pub username: ::std::string::String,
    ///  OAuth scope.
    // @@protoc_insertion_point(field:grpc.testing.SimpleResponse.oauth_scope)
    pub oauth_scope: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.SimpleResponse.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimpleResponse {
    fn default() -> &'a SimpleResponse {
        <SimpleResponse as ::protobufv3::Message>::default_instance()
    }
}

impl SimpleResponse {
    pub fn new() -> SimpleResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Payload>(
            "payload",
            |m: &SimpleResponse| { &m.payload },
            |m: &mut SimpleResponse| { &mut m.payload },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &SimpleResponse| { &m.username },
            |m: &mut SimpleResponse| { &mut m.username },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "oauth_scope",
            |m: &SimpleResponse| { &m.oauth_scope },
            |m: &mut SimpleResponse| { &mut m.oauth_scope },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<SimpleResponse>(
            "SimpleResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for SimpleResponse {
    const NAME: &'static str = "SimpleResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                18 => {
                    self.username = is.read_string()?;
                },
                26 => {
                    self.oauth_scope = is.read_string()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.username.is_empty() {
            my_size += ::protobufv3::rt::string_size(2, &self.username);
        }
        if !self.oauth_scope.is_empty() {
            my_size += ::protobufv3::rt::string_size(3, &self.oauth_scope);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if let Some(v) = self.payload.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if !self.oauth_scope.is_empty() {
            os.write_string(3, &self.oauth_scope)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimpleResponse {
        SimpleResponse::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.username.clear();
        self.oauth_scope.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimpleResponse {
        static instance: SimpleResponse = SimpleResponse {
            payload: ::protobufv3::MessageField::none(),
            username: ::std::string::String::new(),
            oauth_scope: ::std::string::String::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for SimpleResponse {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimpleResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimpleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for SimpleResponse {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Client-streaming request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.StreamingInputCallRequest)
pub struct StreamingInputCallRequest {
    // message fields
    ///  Optional input payload sent along with the request.
    // @@protoc_insertion_point(field:grpc.testing.StreamingInputCallRequest.payload)
    pub payload: ::protobufv3::MessageField<Payload>,
    ///  Whether the server should expect this request to be compressed. This field
    ///  is "nullable" in order to interoperate seamlessly with servers not able to
    ///  implement the full compression tests by introspecting the call to verify
    ///  the request's compression status.
    // @@protoc_insertion_point(field:grpc.testing.StreamingInputCallRequest.expect_compressed)
    pub expect_compressed: ::protobufv3::MessageField<BoolValue>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.StreamingInputCallRequest.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamingInputCallRequest {
    fn default() -> &'a StreamingInputCallRequest {
        <StreamingInputCallRequest as ::protobufv3::Message>::default_instance()
    }
}

impl StreamingInputCallRequest {
    pub fn new() -> StreamingInputCallRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Payload>(
            "payload",
            |m: &StreamingInputCallRequest| { &m.payload },
            |m: &mut StreamingInputCallRequest| { &mut m.payload },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, BoolValue>(
            "expect_compressed",
            |m: &StreamingInputCallRequest| { &m.expect_compressed },
            |m: &mut StreamingInputCallRequest| { &mut m.expect_compressed },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<StreamingInputCallRequest>(
            "StreamingInputCallRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for StreamingInputCallRequest {
    const NAME: &'static str = "StreamingInputCallRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                18 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.expect_compressed)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.expect_compressed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if let Some(v) = self.payload.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.expect_compressed.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamingInputCallRequest {
        StreamingInputCallRequest::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.expect_compressed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamingInputCallRequest {
        static instance: StreamingInputCallRequest = StreamingInputCallRequest {
            payload: ::protobufv3::MessageField::none(),
            expect_compressed: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for StreamingInputCallRequest {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamingInputCallRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamingInputCallRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for StreamingInputCallRequest {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Client-streaming response.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.StreamingInputCallResponse)
pub struct StreamingInputCallResponse {
    // message fields
    ///  Aggregated size of payloads received from the client.
    // @@protoc_insertion_point(field:grpc.testing.StreamingInputCallResponse.aggregated_payload_size)
    pub aggregated_payload_size: i32,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.StreamingInputCallResponse.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamingInputCallResponse {
    fn default() -> &'a StreamingInputCallResponse {
        <StreamingInputCallResponse as ::protobufv3::Message>::default_instance()
    }
}

impl StreamingInputCallResponse {
    pub fn new() -> StreamingInputCallResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "aggregated_payload_size",
            |m: &StreamingInputCallResponse| { &m.aggregated_payload_size },
            |m: &mut StreamingInputCallResponse| { &mut m.aggregated_payload_size },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<StreamingInputCallResponse>(
            "StreamingInputCallResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for StreamingInputCallResponse {
    const NAME: &'static str = "StreamingInputCallResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.aggregated_payload_size = is.read_int32()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.aggregated_payload_size != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.aggregated_payload_size);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.aggregated_payload_size != 0 {
            os.write_int32(1, self.aggregated_payload_size)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamingInputCallResponse {
        StreamingInputCallResponse::new()
    }

    fn clear(&mut self) {
        self.aggregated_payload_size = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamingInputCallResponse {
        static instance: StreamingInputCallResponse = StreamingInputCallResponse {
            aggregated_payload_size: 0,
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for StreamingInputCallResponse {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamingInputCallResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamingInputCallResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for StreamingInputCallResponse {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Configuration for a particular response.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.ResponseParameters)
pub struct ResponseParameters {
    // message fields
    ///  Desired payload sizes in responses from the server.
    // @@protoc_insertion_point(field:grpc.testing.ResponseParameters.size)
    pub size: i32,
    ///  Desired interval between consecutive responses in the response stream in
    ///  microseconds.
    // @@protoc_insertion_point(field:grpc.testing.ResponseParameters.interval_us)
    pub interval_us: i32,
    ///  Whether to request the server to compress the response. This field is
    ///  "nullable" in order to interoperate seamlessly with clients not able to
    ///  implement the full compression tests by introspecting the call to verify
    ///  the response's compression status.
    // @@protoc_insertion_point(field:grpc.testing.ResponseParameters.compressed)
    pub compressed: ::protobufv3::MessageField<BoolValue>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.ResponseParameters.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResponseParameters {
    fn default() -> &'a ResponseParameters {
        <ResponseParameters as ::protobufv3::Message>::default_instance()
    }
}

impl ResponseParameters {
    pub fn new() -> ResponseParameters {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &ResponseParameters| { &m.size },
            |m: &mut ResponseParameters| { &mut m.size },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interval_us",
            |m: &ResponseParameters| { &m.interval_us },
            |m: &mut ResponseParameters| { &mut m.interval_us },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, BoolValue>(
            "compressed",
            |m: &ResponseParameters| { &m.compressed },
            |m: &mut ResponseParameters| { &mut m.compressed },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<ResponseParameters>(
            "ResponseParameters",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for ResponseParameters {
    const NAME: &'static str = "ResponseParameters";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.size = is.read_int32()?;
                },
                16 => {
                    self.interval_us = is.read_int32()?;
                },
                26 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.compressed)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.size != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.size);
        }
        if self.interval_us != 0 {
            my_size += ::protobufv3::rt::int32_size(2, self.interval_us);
        }
        if let Some(v) = self.compressed.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.size != 0 {
            os.write_int32(1, self.size)?;
        }
        if self.interval_us != 0 {
            os.write_int32(2, self.interval_us)?;
        }
        if let Some(v) = self.compressed.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResponseParameters {
        ResponseParameters::new()
    }

    fn clear(&mut self) {
        self.size = 0;
        self.interval_us = 0;
        self.compressed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResponseParameters {
        static instance: ResponseParameters = ResponseParameters {
            size: 0,
            interval_us: 0,
            compressed: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for ResponseParameters {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResponseParameters").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResponseParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for ResponseParameters {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Server-streaming request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.StreamingOutputCallRequest)
pub struct StreamingOutputCallRequest {
    // message fields
    ///  DEPRECATED, don't use. To be removed shortly.
    ///  Desired payload type in the response from the server.
    ///  If response_type is RANDOM, the payload from each response in the stream
    ///  might be of different types. This is to simulate a mixed type of payload
    ///  stream.
    // @@protoc_insertion_point(field:grpc.testing.StreamingOutputCallRequest.response_type)
    pub response_type: ::protobufv3::EnumOrUnknown<PayloadType>,
    ///  Configuration for each expected response message.
    // @@protoc_insertion_point(field:grpc.testing.StreamingOutputCallRequest.response_parameters)
    pub response_parameters: ::std::vec::Vec<ResponseParameters>,
    ///  Optional input payload sent along with the request.
    // @@protoc_insertion_point(field:grpc.testing.StreamingOutputCallRequest.payload)
    pub payload: ::protobufv3::MessageField<Payload>,
    ///  Whether server should return a given status
    // @@protoc_insertion_point(field:grpc.testing.StreamingOutputCallRequest.response_status)
    pub response_status: ::protobufv3::MessageField<EchoStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.StreamingOutputCallRequest.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamingOutputCallRequest {
    fn default() -> &'a StreamingOutputCallRequest {
        <StreamingOutputCallRequest as ::protobufv3::Message>::default_instance()
    }
}

impl StreamingOutputCallRequest {
    pub fn new() -> StreamingOutputCallRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_type",
            |m: &StreamingOutputCallRequest| { &m.response_type },
            |m: &mut StreamingOutputCallRequest| { &mut m.response_type },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "response_parameters",
            |m: &StreamingOutputCallRequest| { &m.response_parameters },
            |m: &mut StreamingOutputCallRequest| { &mut m.response_parameters },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Payload>(
            "payload",
            |m: &StreamingOutputCallRequest| { &m.payload },
            |m: &mut StreamingOutputCallRequest| { &mut m.payload },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, EchoStatus>(
            "response_status",
            |m: &StreamingOutputCallRequest| { &m.response_status },
            |m: &mut StreamingOutputCallRequest| { &mut m.response_status },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<StreamingOutputCallRequest>(
            "StreamingOutputCallRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for StreamingOutputCallRequest {
    const NAME: &'static str = "StreamingOutputCallRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.response_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.response_parameters.push(is.read_message()?);
                },
                26 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                58 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.response_status)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.response_type != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            my_size += ::protobufv3::rt::int32_size(1, self.response_type.value());
        }
        for value in &self.response_parameters {
            let len = value.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.response_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.response_type != ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE) {
            os.write_enum(1, ::protobufv3::EnumOrUnknown::value(&self.response_type))?;
        }
        for v in &self.response_parameters {
            ::protobufv3::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.payload.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.response_status.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamingOutputCallRequest {
        StreamingOutputCallRequest::new()
    }

    fn clear(&mut self) {
        self.response_type = ::protobufv3::EnumOrUnknown::new(PayloadType::COMPRESSABLE);
        self.response_parameters.clear();
        self.payload.clear();
        self.response_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamingOutputCallRequest {
        static instance: StreamingOutputCallRequest = StreamingOutputCallRequest {
            response_type: ::protobufv3::EnumOrUnknown::from_i32(0),
            response_parameters: ::std::vec::Vec::new(),
            payload: ::protobufv3::MessageField::none(),
            response_status: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for StreamingOutputCallRequest {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamingOutputCallRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamingOutputCallRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for StreamingOutputCallRequest {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Server-streaming response, as configured by the request and parameters.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.StreamingOutputCallResponse)
pub struct StreamingOutputCallResponse {
    // message fields
    ///  Payload to increase response size.
    // @@protoc_insertion_point(field:grpc.testing.StreamingOutputCallResponse.payload)
    pub payload: ::protobufv3::MessageField<Payload>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.StreamingOutputCallResponse.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamingOutputCallResponse {
    fn default() -> &'a StreamingOutputCallResponse {
        <StreamingOutputCallResponse as ::protobufv3::Message>::default_instance()
    }
}

impl StreamingOutputCallResponse {
    pub fn new() -> StreamingOutputCallResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Payload>(
            "payload",
            |m: &StreamingOutputCallResponse| { &m.payload },
            |m: &mut StreamingOutputCallResponse| { &mut m.payload },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<StreamingOutputCallResponse>(
            "StreamingOutputCallResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for StreamingOutputCallResponse {
    const NAME: &'static str = "StreamingOutputCallResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if let Some(v) = self.payload.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamingOutputCallResponse {
        StreamingOutputCallResponse::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamingOutputCallResponse {
        static instance: StreamingOutputCallResponse = StreamingOutputCallResponse {
            payload: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for StreamingOutputCallResponse {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamingOutputCallResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamingOutputCallResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for StreamingOutputCallResponse {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  For reconnect interop test only.
///  Client tells server what reconnection parameters it used.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.ReconnectParams)
pub struct ReconnectParams {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.ReconnectParams.max_reconnect_backoff_ms)
    pub max_reconnect_backoff_ms: i32,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.ReconnectParams.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReconnectParams {
    fn default() -> &'a ReconnectParams {
        <ReconnectParams as ::protobufv3::Message>::default_instance()
    }
}

impl ReconnectParams {
    pub fn new() -> ReconnectParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_reconnect_backoff_ms",
            |m: &ReconnectParams| { &m.max_reconnect_backoff_ms },
            |m: &mut ReconnectParams| { &mut m.max_reconnect_backoff_ms },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<ReconnectParams>(
            "ReconnectParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for ReconnectParams {
    const NAME: &'static str = "ReconnectParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.max_reconnect_backoff_ms = is.read_int32()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.max_reconnect_backoff_ms != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.max_reconnect_backoff_ms);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.max_reconnect_backoff_ms != 0 {
            os.write_int32(1, self.max_reconnect_backoff_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReconnectParams {
        ReconnectParams::new()
    }

    fn clear(&mut self) {
        self.max_reconnect_backoff_ms = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReconnectParams {
        static instance: ReconnectParams = ReconnectParams {
            max_reconnect_backoff_ms: 0,
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for ReconnectParams {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReconnectParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReconnectParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for ReconnectParams {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  For reconnect interop test only.
///  Server tells client whether its reconnects are following the spec and the
///  reconnect backoffs it saw.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.ReconnectInfo)
pub struct ReconnectInfo {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.ReconnectInfo.passed)
    pub passed: bool,
    // @@protoc_insertion_point(field:grpc.testing.ReconnectInfo.backoff_ms)
    pub backoff_ms: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.ReconnectInfo.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReconnectInfo {
    fn default() -> &'a ReconnectInfo {
        <ReconnectInfo as ::protobufv3::Message>::default_instance()
    }
}

impl ReconnectInfo {
    pub fn new() -> ReconnectInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "passed",
            |m: &ReconnectInfo| { &m.passed },
            |m: &mut ReconnectInfo| { &mut m.passed },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "backoff_ms",
            |m: &ReconnectInfo| { &m.backoff_ms },
            |m: &mut ReconnectInfo| { &mut m.backoff_ms },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<ReconnectInfo>(
            "ReconnectInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for ReconnectInfo {
    const NAME: &'static str = "ReconnectInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.passed = is.read_bool()?;
                },
                18 => {
                    is.read_repeated_packed_int32_into(&mut self.backoff_ms)?;
                },
                16 => {
                    self.backoff_ms.push(is.read_int32()?);
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.passed != false {
            my_size += 1 + 1;
        }
        for value in &self.backoff_ms {
            my_size += ::protobufv3::rt::int32_size(2, *value);
        };
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.passed != false {
            os.write_bool(1, self.passed)?;
        }
        for v in &self.backoff_ms {
            os.write_int32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReconnectInfo {
        ReconnectInfo::new()
    }

    fn clear(&mut self) {
        self.passed = false;
        self.backoff_ms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReconnectInfo {
        static instance: ReconnectInfo = ReconnectInfo {
            passed: false,
            backoff_ms: ::std::vec::Vec::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for ReconnectInfo {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReconnectInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReconnectInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for ReconnectInfo {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DEPRECATED, don't use. To be removed shortly.
///  The type of payload that should be returned.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:grpc.testing.PayloadType)
pub enum PayloadType {
    // @@protoc_insertion_point(enum_value:grpc.testing.PayloadType.COMPRESSABLE)
    COMPRESSABLE = 0,
}

impl ::protobufv3::Enum for PayloadType {
    const NAME: &'static str = "PayloadType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PayloadType> {
        match value {
            0 => ::std::option::Option::Some(PayloadType::COMPRESSABLE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PayloadType] = &[
        PayloadType::COMPRESSABLE,
    ];
}

impl ::protobufv3::EnumFull for PayloadType {
    fn enum_descriptor() -> ::protobufv3::reflect::EnumDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::EnumDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PayloadType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobufv3::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PayloadType {
    fn default() -> Self {
        PayloadType::COMPRESSABLE
    }
}

impl PayloadType {
    fn generated_enum_descriptor_data() -> ::protobufv3::reflect::GeneratedEnumDescriptorData {
        ::protobufv3::reflect::GeneratedEnumDescriptorData::new::<PayloadType>("PayloadType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x12\x0cgrpc.testing\"!\n\tBoolValue\x12\x14\n\x05va\
    lue\x18\x01\x20\x01(\x08R\x05value\"L\n\x07Payload\x12-\n\x04type\x18\
    \x01\x20\x01(\x0e2\x19.grpc.testing.PayloadTypeR\x04type\x12\x12\n\x04bo\
    dy\x18\x02\x20\x01(\x0cR\x04body\":\n\nEchoStatus\x12\x12\n\x04code\x18\
    \x01\x20\x01(\x05R\x04code\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07m\
    essage\"\xc7\x03\n\rSimpleRequest\x12>\n\rresponse_type\x18\x01\x20\x01(\
    \x0e2\x19.grpc.testing.PayloadTypeR\x0cresponseType\x12#\n\rresponse_siz\
    e\x18\x02\x20\x01(\x05R\x0cresponseSize\x12/\n\x07payload\x18\x03\x20\
    \x01(\x0b2\x15.grpc.testing.PayloadR\x07payload\x12#\n\rfill_username\
    \x18\x04\x20\x01(\x08R\x0cfillUsername\x12(\n\x10fill_oauth_scope\x18\
    \x05\x20\x01(\x08R\x0efillOauthScope\x12H\n\x13response_compressed\x18\
    \x06\x20\x01(\x0b2\x17.grpc.testing.BoolValueR\x12responseCompressed\x12\
    A\n\x0fresponse_status\x18\x07\x20\x01(\x0b2\x18.grpc.testing.EchoStatus\
    R\x0eresponseStatus\x12D\n\x11expect_compressed\x18\x08\x20\x01(\x0b2\
    \x17.grpc.testing.BoolValueR\x10expectCompressed\"~\n\x0eSimpleResponse\
    \x12/\n\x07payload\x18\x01\x20\x01(\x0b2\x15.grpc.testing.PayloadR\x07pa\
    yload\x12\x1a\n\x08username\x18\x02\x20\x01(\tR\x08username\x12\x1f\n\
    \x0boauth_scope\x18\x03\x20\x01(\tR\noauthScope\"\x92\x01\n\x19Streaming\
    InputCallRequest\x12/\n\x07payload\x18\x01\x20\x01(\x0b2\x15.grpc.testin\
    g.PayloadR\x07payload\x12D\n\x11expect_compressed\x18\x02\x20\x01(\x0b2\
    \x17.grpc.testing.BoolValueR\x10expectCompressed\"T\n\x1aStreamingInputC\
    allResponse\x126\n\x17aggregated_payload_size\x18\x01\x20\x01(\x05R\x15a\
    ggregatedPayloadSize\"\x82\x01\n\x12ResponseParameters\x12\x12\n\x04size\
    \x18\x01\x20\x01(\x05R\x04size\x12\x1f\n\x0binterval_us\x18\x02\x20\x01(\
    \x05R\nintervalUs\x127\n\ncompressed\x18\x03\x20\x01(\x0b2\x17.grpc.test\
    ing.BoolValueR\ncompressed\"\xa3\x02\n\x1aStreamingOutputCallRequest\x12\
    >\n\rresponse_type\x18\x01\x20\x01(\x0e2\x19.grpc.testing.PayloadTypeR\
    \x0cresponseType\x12Q\n\x13response_parameters\x18\x02\x20\x03(\x0b2\x20\
    .grpc.testing.ResponseParametersR\x12responseParameters\x12/\n\x07payloa\
    d\x18\x03\x20\x01(\x0b2\x15.grpc.testing.PayloadR\x07payload\x12A\n\x0fr\
    esponse_status\x18\x07\x20\x01(\x0b2\x18.grpc.testing.EchoStatusR\x0eres\
    ponseStatus\"N\n\x1bStreamingOutputCallResponse\x12/\n\x07payload\x18\
    \x01\x20\x01(\x0b2\x15.grpc.testing.PayloadR\x07payload\"J\n\x0fReconnec\
    tParams\x127\n\x18max_reconnect_backoff_ms\x18\x01\x20\x01(\x05R\x15maxR\
    econnectBackoffMs\"F\n\rReconnectInfo\x12\x16\n\x06passed\x18\x01\x20\
    \x01(\x08R\x06passed\x12\x1d\n\nbackoff_ms\x18\x02\x20\x03(\x05R\tbackof\
    fMs*\x1f\n\x0bPayloadType\x12\x10\n\x0cCOMPRESSABLE\x10\0J\x9c/\n\x07\
    \x12\x05\x11\0\xa8\x01\x01\n\x8f\x05\n\x01\x0c\x12\x03\x11\0\x122\xb9\
    \x04\x20Copyright\x202015-2016\x20gRPC\x20authors.\n\n\x20Licensed\x20un\
    der\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\
    \");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20co\
    mpliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20co\
    py\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apach\
    e.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n2I\x20Message\
    \x20definitions\x20to\x20be\x20used\x20by\x20integration\x20test\x20serv\
    ice\x20definitions.\n\n\x08\n\x01\x02\x12\x03\x13\0\x15\n\xa4\x01\n\x02\
    \x04\0\x12\x04\x18\0\x1b\x01\x1a\x97\x01\x20TODO(dgq):\x20Go\x20back\x20\
    to\x20using\x20well-known\x20types\x20once\n\x20https://github.com/grpc/\
    grpc/issues/6980\x20has\x20been\x20fixed.\n\x20import\x20\"google/protob\
    uf/wrappers.proto\";\n\n\n\n\x03\x04\0\x01\x12\x03\x18\x08\x11\n\x1e\n\
    \x04\x04\0\x02\0\x12\x03\x1a\x02\x11\x1a\x11\x20The\x20bool\x20value.\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\x02\x06\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x1a\x07\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1a\x0f\x10\
    \ni\n\x02\x05\0\x12\x04\x1f\0\"\x01\x1a]\x20DEPRECATED,\x20don't\x20use.\
    \x20To\x20be\x20removed\x20shortly.\n\x20The\x20type\x20of\x20payload\
    \x20that\x20should\x20be\x20returned.\n\n\n\n\x03\x05\0\x01\x12\x03\x1f\
    \x05\x10\n(\n\x04\x05\0\x02\0\x12\x03!\x02\x13\x1a\x1b\x20Compressable\
    \x20text\x20format.\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03!\x02\x0e\n\x0c\
    \n\x05\x05\0\x02\0\x02\x12\x03!\x11\x12\nD\n\x02\x04\x01\x12\x04%\0+\x01\
    \x1a8\x20A\x20block\x20of\x20data,\x20to\x20simply\x20increase\x20gRPC\
    \x20message\x20size.\n\n\n\n\x03\x04\x01\x01\x12\x03%\x08\x0f\nW\n\x04\
    \x04\x01\x02\0\x12\x03(\x02\x17\x1aJ\x20DEPRECATED,\x20don't\x20use.\x20\
    To\x20be\x20removed\x20shortly.\n\x20The\x20type\x20of\x20data\x20in\x20\
    body.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03(\x02\r\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03(\x0e\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03(\x15\
    \x16\n+\n\x04\x04\x01\x02\x01\x12\x03*\x02\x11\x1a\x1e\x20Primary\x20con\
    tents\x20of\x20payload.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03*\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03*\x08\x0c\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03*\x0f\x10\n\x95\x01\n\x02\x04\x02\x12\x04/\02\
    \x01\x1a\x88\x01\x20A\x20protobuf\x20representation\x20for\x20grpc\x20st\
    atus.\x20This\x20is\x20used\x20by\x20test\n\x20clients\x20to\x20specify\
    \x20a\x20status\x20that\x20the\x20server\x20should\x20attempt\x20to\x20r\
    eturn.\n\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x12\n\x0b\n\x04\x04\x02\x02\
    \0\x12\x030\x02\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x030\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x030\x08\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x030\x0f\x10\n\x0b\n\x04\x04\x02\x02\x01\x12\x031\x02\x15\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x031\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x031\x13\x14\n\
    \x1c\n\x02\x04\x03\x12\x045\0R\x01\x1a\x10\x20Unary\x20request.\n\n\n\n\
    \x03\x04\x03\x01\x12\x035\x08\x15\n\xc1\x01\n\x04\x04\x03\x02\0\x12\x039\
    \x02\x20\x1a\xb3\x01\x20DEPRECATED,\x20don't\x20use.\x20To\x20be\x20remo\
    ved\x20shortly.\n\x20Desired\x20payload\x20type\x20in\x20the\x20response\
    \x20from\x20the\x20server.\n\x20If\x20response_type\x20is\x20RANDOM,\x20\
    server\x20randomly\x20chooses\x20one\x20from\x20other\x20formats.\n\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x039\x02\r\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x039\x0e\x1b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x039\x1e\x1f\nD\
    \n\x04\x04\x03\x02\x01\x12\x03<\x02\x1a\x1a7\x20Desired\x20payload\x20si\
    ze\x20in\x20the\x20response\x20from\x20the\x20server.\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03<\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03<\x08\x15\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03<\x18\x19\nB\n\x04\
    \x04\x03\x02\x02\x12\x03?\x02\x16\x1a5\x20Optional\x20input\x20payload\
    \x20sent\x20along\x20with\x20the\x20request.\n\n\x0c\n\x05\x04\x03\x02\
    \x02\x06\x12\x03?\x02\t\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03?\n\x11\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03?\x14\x15\n>\n\x04\x04\x03\x02\x03\
    \x12\x03B\x02\x19\x1a1\x20Whether\x20SimpleResponse\x20should\x20include\
    \x20username.\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03B\x02\x06\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03B\x07\x14\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03B\x17\x18\nA\n\x04\x04\x03\x02\x04\x12\x03E\x02\x1c\x1a4\x20\
    Whether\x20SimpleResponse\x20should\x20include\x20OAuth\x20scope.\n\n\
    \x0c\n\x05\x04\x03\x02\x04\x05\x12\x03E\x02\x06\n\x0c\n\x05\x04\x03\x02\
    \x04\x01\x12\x03E\x07\x17\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03E\x1a\
    \x1b\n\x8c\x02\n\x04\x04\x03\x02\x05\x12\x03K\x02$\x1a\xfe\x01\x20Whethe\
    r\x20to\x20request\x20the\x20server\x20to\x20compress\x20the\x20response\
    .\x20This\x20field\x20is\n\x20\"nullable\"\x20in\x20order\x20to\x20inter\
    operate\x20seamlessly\x20with\x20clients\x20not\x20able\x20to\n\x20imple\
    ment\x20the\x20full\x20compression\x20tests\x20by\x20introspecting\x20th\
    e\x20call\x20to\x20verify\n\x20the\x20response's\x20compression\x20statu\
    s.\n\n\x0c\n\x05\x04\x03\x02\x05\x06\x12\x03K\x02\x0b\n\x0c\n\x05\x04\
    \x03\x02\x05\x01\x12\x03K\x0c\x1f\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\
    \x03K\"#\n:\n\x04\x04\x03\x02\x06\x12\x03N\x02!\x1a-\x20Whether\x20serve\
    r\x20should\x20return\x20a\x20given\x20status\n\n\x0c\n\x05\x04\x03\x02\
    \x06\x06\x12\x03N\x02\x0c\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03N\r\x1c\
    \n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03N\x1f\x20\nN\n\x04\x04\x03\x02\
    \x07\x12\x03Q\x02\"\x1aA\x20Whether\x20the\x20server\x20should\x20expect\
    \x20this\x20request\x20to\x20be\x20compressed.\n\n\x0c\n\x05\x04\x03\x02\
    \x07\x06\x12\x03Q\x02\x0b\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03Q\x0c\
    \x1d\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03Q\x20!\n;\n\x02\x04\x04\x12\
    \x04U\0]\x01\x1a/\x20Unary\x20response,\x20as\x20configured\x20by\x20the\
    \x20request.\n\n\n\n\x03\x04\x04\x01\x12\x03U\x08\x16\n0\n\x04\x04\x04\
    \x02\0\x12\x03W\x02\x16\x1a#\x20Payload\x20to\x20increase\x20message\x20\
    size.\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03W\x02\t\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03W\n\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03W\x14\x15\
    \nx\n\x04\x04\x04\x02\x01\x12\x03Z\x02\x16\x1ak\x20The\x20user\x20the\
    \x20request\x20came\x20from,\x20for\x20verifying\x20authentication\x20wa\
    s\n\x20successful\x20when\x20the\x20client\x20expected\x20it.\n\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03Z\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03Z\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03Z\x14\x15\n\
    \x1b\n\x04\x04\x04\x02\x02\x12\x03\\\x02\x19\x1a\x0e\x20OAuth\x20scope.\
    \n\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x02\x01\x12\x03\\\t\x14\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\\\
    \x17\x18\n'\n\x02\x04\x05\x12\x04`\0k\x01\x1a\x1b\x20Client-streaming\
    \x20request.\n\n\n\n\x03\x04\x05\x01\x12\x03`\x08!\nB\n\x04\x04\x05\x02\
    \0\x12\x03b\x02\x16\x1a5\x20Optional\x20input\x20payload\x20sent\x20alon\
    g\x20with\x20the\x20request.\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03b\
    \x02\t\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03b\n\x11\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03b\x14\x15\n\x93\x02\n\x04\x04\x05\x02\x01\x12\x03h\x02\
    \"\x1a\x85\x02\x20Whether\x20the\x20server\x20should\x20expect\x20this\
    \x20request\x20to\x20be\x20compressed.\x20This\x20field\n\x20is\x20\"nul\
    lable\"\x20in\x20order\x20to\x20interoperate\x20seamlessly\x20with\x20se\
    rvers\x20not\x20able\x20to\n\x20implement\x20the\x20full\x20compression\
    \x20tests\x20by\x20introspecting\x20the\x20call\x20to\x20verify\n\x20the\
    \x20request's\x20compression\x20status.\n\n\x0c\n\x05\x04\x05\x02\x01\
    \x06\x12\x03h\x02\x0b\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03h\x0c\x1d\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03h\x20!\n(\n\x02\x04\x06\x12\x04n\0\
    q\x01\x1a\x1c\x20Client-streaming\x20response.\n\n\n\n\x03\x04\x06\x01\
    \x12\x03n\x08\"\nD\n\x04\x04\x06\x02\0\x12\x03p\x02$\x1a7\x20Aggregated\
    \x20size\x20of\x20payloads\x20received\x20from\x20the\x20client.\n\n\x0c\
    \n\x05\x04\x06\x02\0\x05\x12\x03p\x02\x07\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03p\x08\x1f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03p\"#\n7\n\x02\x04\
    \x07\x12\x05t\0\x81\x01\x01\x1a*\x20Configuration\x20for\x20a\x20particu\
    lar\x20response.\n\n\n\n\x03\x04\x07\x01\x12\x03t\x08\x1a\nB\n\x04\x04\
    \x07\x02\0\x12\x03v\x02\x11\x1a5\x20Desired\x20payload\x20sizes\x20in\
    \x20responses\x20from\x20the\x20server.\n\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03v\x02\x07\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03v\x08\x0c\n\x0c\n\
    \x05\x04\x07\x02\0\x03\x12\x03v\x0f\x10\nf\n\x04\x04\x07\x02\x01\x12\x03\
    z\x02\x18\x1aY\x20Desired\x20interval\x20between\x20consecutive\x20respo\
    nses\x20in\x20the\x20response\x20stream\x20in\n\x20microseconds.\n\n\x0c\
    \n\x05\x04\x07\x02\x01\x05\x12\x03z\x02\x07\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x03z\x08\x13\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03z\x16\x17\n\
    \x8d\x02\n\x04\x04\x07\x02\x02\x12\x04\x80\x01\x02\x1b\x1a\xfe\x01\x20Wh\
    ether\x20to\x20request\x20the\x20server\x20to\x20compress\x20the\x20resp\
    onse.\x20This\x20field\x20is\n\x20\"nullable\"\x20in\x20order\x20to\x20i\
    nteroperate\x20seamlessly\x20with\x20clients\x20not\x20able\x20to\n\x20i\
    mplement\x20the\x20full\x20compression\x20tests\x20by\x20introspecting\
    \x20the\x20call\x20to\x20verify\n\x20the\x20response's\x20compression\
    \x20status.\n\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\x80\x01\x02\x0b\n\r\
    \n\x05\x04\x07\x02\x02\x01\x12\x04\x80\x01\x0c\x16\n\r\n\x05\x04\x07\x02\
    \x02\x03\x12\x04\x80\x01\x19\x1a\n)\n\x02\x04\x08\x12\x06\x84\x01\0\x94\
    \x01\x01\x1a\x1b\x20Server-streaming\x20request.\n\n\x0b\n\x03\x04\x08\
    \x01\x12\x04\x84\x01\x08\"\n\x92\x02\n\x04\x04\x08\x02\0\x12\x04\x8a\x01\
    \x02\x20\x1a\x83\x02\x20DEPRECATED,\x20don't\x20use.\x20To\x20be\x20remo\
    ved\x20shortly.\n\x20Desired\x20payload\x20type\x20in\x20the\x20response\
    \x20from\x20the\x20server.\n\x20If\x20response_type\x20is\x20RANDOM,\x20\
    the\x20payload\x20from\x20each\x20response\x20in\x20the\x20stream\n\x20m\
    ight\x20be\x20of\x20different\x20types.\x20This\x20is\x20to\x20simulate\
    \x20a\x20mixed\x20type\x20of\x20payload\n\x20stream.\n\n\r\n\x05\x04\x08\
    \x02\0\x06\x12\x04\x8a\x01\x02\r\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x8a\
    \x01\x0e\x1b\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x8a\x01\x1e\x1f\nA\n\
    \x04\x04\x08\x02\x01\x12\x04\x8d\x01\x026\x1a3\x20Configuration\x20for\
    \x20each\x20expected\x20response\x20message.\n\n\r\n\x05\x04\x08\x02\x01\
    \x04\x12\x04\x8d\x01\x02\n\n\r\n\x05\x04\x08\x02\x01\x06\x12\x04\x8d\x01\
    \x0b\x1d\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x8d\x01\x1e1\n\r\n\x05\
    \x04\x08\x02\x01\x03\x12\x04\x8d\x0145\nC\n\x04\x04\x08\x02\x02\x12\x04\
    \x90\x01\x02\x16\x1a5\x20Optional\x20input\x20payload\x20sent\x20along\
    \x20with\x20the\x20request.\n\n\r\n\x05\x04\x08\x02\x02\x06\x12\x04\x90\
    \x01\x02\t\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\x90\x01\n\x11\n\r\n\x05\
    \x04\x08\x02\x02\x03\x12\x04\x90\x01\x14\x15\n;\n\x04\x04\x08\x02\x03\
    \x12\x04\x93\x01\x02!\x1a-\x20Whether\x20server\x20should\x20return\x20a\
    \x20given\x20status\n\n\r\n\x05\x04\x08\x02\x03\x06\x12\x04\x93\x01\x02\
    \x0c\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\x93\x01\r\x1c\n\r\n\x05\x04\
    \x08\x02\x03\x03\x12\x04\x93\x01\x1f\x20\nW\n\x02\x04\t\x12\x06\x97\x01\
    \0\x9a\x01\x01\x1aI\x20Server-streaming\x20response,\x20as\x20configured\
    \x20by\x20the\x20request\x20and\x20parameters.\n\n\x0b\n\x03\x04\t\x01\
    \x12\x04\x97\x01\x08#\n2\n\x04\x04\t\x02\0\x12\x04\x99\x01\x02\x16\x1a$\
    \x20Payload\x20to\x20increase\x20response\x20size.\n\n\r\n\x05\x04\t\x02\
    \0\x06\x12\x04\x99\x01\x02\t\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x99\x01\n\
    \x11\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x99\x01\x14\x15\nk\n\x02\x04\n\
    \x12\x06\x9e\x01\0\xa0\x01\x01\x1a]\x20For\x20reconnect\x20interop\x20te\
    st\x20only.\n\x20Client\x20tells\x20server\x20what\x20reconnection\x20pa\
    rameters\x20it\x20used.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x9e\x01\x08\x17\
    \n\x0c\n\x04\x04\n\x02\0\x12\x04\x9f\x01\x02%\n\r\n\x05\x04\n\x02\0\x05\
    \x12\x04\x9f\x01\x02\x07\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x9f\x01\x08\
    \x20\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x9f\x01#$\n\x98\x01\n\x02\x04\x0b\
    \x12\x06\xa5\x01\0\xa8\x01\x01\x1a\x89\x01\x20For\x20reconnect\x20intero\
    p\x20test\x20only.\n\x20Server\x20tells\x20client\x20whether\x20its\x20r\
    econnects\x20are\x20following\x20the\x20spec\x20and\x20the\n\x20reconnec\
    t\x20backoffs\x20it\x20saw.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xa5\x01\
    \x08\x15\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\xa6\x01\x02\x12\n\r\n\x05\x04\
    \x0b\x02\0\x05\x12\x04\xa6\x01\x02\x06\n\r\n\x05\x04\x0b\x02\0\x01\x12\
    \x04\xa6\x01\x07\r\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xa6\x01\x10\x11\n\
    \x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa7\x01\x02\x20\n\r\n\x05\x04\x0b\x02\
    \x01\x04\x12\x04\xa7\x01\x02\n\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\xa7\
    \x01\x0b\x10\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa7\x01\x11\x1b\n\r\n\
    \x05\x04\x0b\x02\x01\x03\x12\x04\xa7\x01\x1e\x1fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(BoolValue::generated_message_descriptor_data());
            messages.push(Payload::generated_message_descriptor_data());
            messages.push(EchoStatus::generated_message_descriptor_data());
            messages.push(SimpleRequest::generated_message_descriptor_data());
            messages.push(SimpleResponse::generated_message_descriptor_data());
            messages.push(StreamingInputCallRequest::generated_message_descriptor_data());
            messages.push(StreamingInputCallResponse::generated_message_descriptor_data());
            messages.push(ResponseParameters::generated_message_descriptor_data());
            messages.push(StreamingOutputCallRequest::generated_message_descriptor_data());
            messages.push(StreamingOutputCallResponse::generated_message_descriptor_data());
            messages.push(ReconnectParams::generated_message_descriptor_data());
            messages.push(ReconnectInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(PayloadType::generated_enum_descriptor_data());
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
