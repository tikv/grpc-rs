// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Response message containing the gauge name and value
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.GaugeResponse)
pub struct GaugeResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.GaugeResponse.name)
    pub name: ::std::string::String,
    // message oneof groups
    pub value: ::std::option::Option<gauge_response::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.GaugeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GaugeResponse {
    fn default() -> &'a GaugeResponse {
        <GaugeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GaugeResponse {
    pub fn new() -> GaugeResponse {
        ::std::default::Default::default()
    }

    // int64 long_value = 2;

    pub fn long_value(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::LongValue(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_long_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_long_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::LongValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_long_value(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(gauge_response::Value::LongValue(v))
    }

    // double double_value = 3;

    pub fn double_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::DoubleValue(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_double_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::DoubleValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(gauge_response::Value::DoubleValue(v))
    }

    // string string_value = 4;

    pub fn string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::StringValue(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::StringValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(gauge_response::Value::StringValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(gauge_response::Value::StringValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(gauge_response::Value::StringValue(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(gauge_response::Value::StringValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(gauge_response::Value::StringValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &GaugeResponse| { &m.name },
            |m: &mut GaugeResponse| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "long_value",
            GaugeResponse::has_long_value,
            GaugeResponse::long_value,
            GaugeResponse::set_long_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "double_value",
            GaugeResponse::has_double_value,
            GaugeResponse::double_value,
            GaugeResponse::set_double_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_value",
            GaugeResponse::has_string_value,
            GaugeResponse::string_value,
            GaugeResponse::set_string_value,
        ));
        oneofs.push(gauge_response::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GaugeResponse>(
            "GaugeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GaugeResponse {
    const NAME: &'static str = "GaugeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.value = ::std::option::Option::Some(gauge_response::Value::LongValue(is.read_int64()?));
                },
                25 => {
                    self.value = ::std::option::Option::Some(gauge_response::Value::DoubleValue(is.read_double()?));
                },
                34 => {
                    self.value = ::std::option::Option::Some(gauge_response::Value::StringValue(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &gauge_response::Value::LongValue(v) => {
                    my_size += ::protobuf::rt::int64_size(2, v);
                },
                &gauge_response::Value::DoubleValue(v) => {
                    my_size += 1 + 8;
                },
                &gauge_response::Value::StringValue(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &gauge_response::Value::LongValue(v) => {
                    os.write_int64(2, v)?;
                },
                &gauge_response::Value::DoubleValue(v) => {
                    os.write_double(3, v)?;
                },
                &gauge_response::Value::StringValue(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GaugeResponse {
        GaugeResponse::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GaugeResponse {
        static instance: GaugeResponse = GaugeResponse {
            name: ::std::string::String::new(),
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GaugeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GaugeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GaugeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GaugeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GaugeResponse`
pub mod gauge_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:grpc.testing.GaugeResponse.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:grpc.testing.GaugeResponse.long_value)
        LongValue(i64),
        // @@protoc_insertion_point(oneof_field:grpc.testing.GaugeResponse.double_value)
        DoubleValue(f64),
        // @@protoc_insertion_point(oneof_field:grpc.testing.GaugeResponse.string_value)
        StringValue(::std::string::String),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GaugeResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

///  Request message containing the gauge name
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.GaugeRequest)
pub struct GaugeRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.testing.GaugeRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.GaugeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GaugeRequest {
    fn default() -> &'a GaugeRequest {
        <GaugeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GaugeRequest {
    pub fn new() -> GaugeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &GaugeRequest| { &m.name },
            |m: &mut GaugeRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GaugeRequest>(
            "GaugeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GaugeRequest {
    const NAME: &'static str = "GaugeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GaugeRequest {
        GaugeRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GaugeRequest {
        static instance: GaugeRequest = GaugeRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GaugeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GaugeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GaugeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GaugeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.testing.EmptyMessage)
pub struct EmptyMessage {
    // special fields
    // @@protoc_insertion_point(special_field:grpc.testing.EmptyMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmptyMessage {
    fn default() -> &'a EmptyMessage {
        <EmptyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EmptyMessage {
    pub fn new() -> EmptyMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmptyMessage>(
            "EmptyMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmptyMessage {
    const NAME: &'static str = "EmptyMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmptyMessage {
        EmptyMessage::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmptyMessage {
        static instance: EmptyMessage = EmptyMessage {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmptyMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmptyMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmptyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmetrics.proto\x12\x0cgrpc.testing\"\x97\x01\n\rGaugeResponse\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\nlong_value\x18\x02\x20\
    \x01(\x03H\0R\tlongValue\x12#\n\x0cdouble_value\x18\x03\x20\x01(\x01H\0R\
    \x0bdoubleValue\x12#\n\x0cstring_value\x18\x04\x20\x01(\tH\0R\x0bstringV\
    alueB\x07\n\x05value\"\"\n\x0cGaugeRequest\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\"\x0e\n\x0cEmptyMessage2\xa0\x01\n\x0eMetricsService\
    \x12I\n\x0cGetAllGauges\x12\x1a.grpc.testing.EmptyMessage\x1a\x1b.grpc.t\
    esting.GaugeResponse0\x01\x12C\n\x08GetGauge\x12\x1a.grpc.testing.GaugeR\
    equest\x1a\x1b.grpc.testing.GaugeResponseJ\xc8\x0c\n\x06\x12\x04\x14\00\
    \x01\n\xc6\x06\n\x01\x0c\x12\x03\x14\0\x12\x1a\xff\x01\x20Contains\x20th\
    e\x20definitions\x20for\x20a\x20metrics\x20service\x20and\x20the\x20type\
    \x20of\x20metrics\n\x20exposed\x20by\x20the\x20service.\n\n\x20Currently\
    ,\x20'Gauge'\x20(i.e\x20a\x20metric\x20that\x20represents\x20the\x20meas\
    ured\x20value\x20of\n\x20something\x20at\x20an\x20instant\x20of\x20time)\
    \x20is\x20the\x20only\x20metric\x20type\x20supported\x20by\x20the\n\x20s\
    ervice.\n2\xb9\x04\x20Copyright\x202015-2016\x20gRPC\x20authors.\n\n\x20\
    Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x16\0\x15\nB\n\x02\x04\0\x12\x04\x19\0\x20\
    \x01\x1a6\x20Response\x20message\x20containing\x20the\x20gauge\x20name\
    \x20and\x20value\n\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x15\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x1a\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\t\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x1a\x10\x11\n\x0c\n\x04\x04\0\x08\0\x12\x04\x1b\x02\
    \x1f\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1b\x08\r\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x1c\x04\x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1c\
    \x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\n\x14\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x1c\x17\x18\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x1d\
    \x04\x1c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x1d\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x1d\x1a\x1b\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1e\x04\x1c\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x1e\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1e\x1a\x1b\n7\n\
    \x02\x04\x01\x12\x04#\0%\x01\x1a+\x20Request\x20message\x20containing\
    \x20the\x20gauge\x20name\n\n\n\n\x03\x04\x01\x01\x12\x03#\x08\x14\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03$\x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03$\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\t\r\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03$\x10\x11\n\t\n\x02\x04\x02\x12\x03'\0\x17\n\n\n\
    \x03\x04\x02\x01\x12\x03'\x08\x14\n\n\n\x02\x06\0\x12\x04)\00\x01\n\n\n\
    \x03\x06\0\x01\x12\x03)\x08\x16\ng\n\x04\x06\0\x02\0\x12\x03,\x02@\x1aZ\
    \x20Returns\x20the\x20values\x20of\x20all\x20the\x20gauges\x20that\x20ar\
    e\x20currently\x20being\x20maintained\x20by\n\x20the\x20service\n\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03,\x06\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03,\x13\x1f\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03,*0\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03,1>\n-\n\x04\x06\0\x02\x01\x12\x03/\x025\x1a\x20\x20Re\
    turns\x20the\x20value\x20of\x20one\x20gauge\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03/\x06\x0e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03/\x0f\x1b\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03/&3b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(GaugeResponse::generated_message_descriptor_data());
            messages.push(GaugeRequest::generated_message_descriptor_data());
            messages.push(EmptyMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
