// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntest.proto\x12\x0cgrpc.testing\x1a\x0bempty.proto\x1a\x0emessages.pr\
    oto2\xcb\x05\n\x0bTestService\x125\n\tEmptyCall\x12\x13.grpc.testing.Emp\
    ty\x1a\x13.grpc.testing.Empty\x12F\n\tUnaryCall\x12\x1b.grpc.testing.Sim\
    pleRequest\x1a\x1c.grpc.testing.SimpleResponse\x12O\n\x12CacheableUnaryC\
    all\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testing.SimpleRespon\
    se\x12l\n\x13StreamingOutputCall\x12(.grpc.testing.StreamingOutputCallRe\
    quest\x1a).grpc.testing.StreamingOutputCallResponse0\x01\x12i\n\x12Strea\
    mingInputCall\x12'.grpc.testing.StreamingInputCallRequest\x1a(.grpc.test\
    ing.StreamingInputCallResponse(\x01\x12i\n\x0eFullDuplexCall\x12(.grpc.t\
    esting.StreamingOutputCallRequest\x1a).grpc.testing.StreamingOutputCallR\
    esponse(\x010\x01\x12i\n\x0eHalfDuplexCall\x12(.grpc.testing.StreamingOu\
    tputCallRequest\x1a).grpc.testing.StreamingOutputCallResponse(\x010\x01\
    \x12=\n\x11UnimplementedCall\x12\x13.grpc.testing.Empty\x1a\x13.grpc.tes\
    ting.Empty2U\n\x14UnimplementedService\x12=\n\x11UnimplementedCall\x12\
    \x13.grpc.testing.Empty\x1a\x13.grpc.testing.Empty2\x89\x01\n\x10Reconne\
    ctService\x12;\n\x05Start\x12\x1d.grpc.testing.ReconnectParams\x1a\x13.g\
    rpc.testing.Empty\x128\n\x04Stop\x12\x13.grpc.testing.Empty\x1a\x1b.grpc\
    .testing.ReconnectInfoJ\xd0\x16\n\x06\x12\x04\x12\0N\x01\n\xbd\x05\n\x01\
    \x0c\x12\x03\x12\0\x122\xb9\x04\x20Copyright\x202015-2016\x20gRPC\x20aut\
    hors.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\
    \x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n2w\x20An\x20integration\x20test\x20service\x20that\
    \x20covers\x20all\x20the\x20method\x20signature\x20permutations\n\x20of\
    \x20unary/streaming\x20requests/responses.\n\n\t\n\x02\x03\0\x12\x03\x14\
    \0\x15\n\t\n\x02\x03\x01\x12\x03\x15\0\x18\n\x08\n\x01\x02\x12\x03\x17\0\
    \x15\n\x80\x01\n\x02\x06\0\x12\x04\x1b\0A\x01\x1at\x20A\x20simple\x20ser\
    vice\x20to\x20test\x20the\x20various\x20types\x20of\x20RPCs\x20and\x20ex\
    periment\x20with\n\x20performance\x20with\x20various\x20types\x20of\x20p\
    ayload.\n\n\n\n\x03\x06\0\x01\x12\x03\x1b\x08\x13\n@\n\x04\x06\0\x02\0\
    \x12\x03\x1d\x02A\x1a3\x20One\x20empty\x20request\x20followed\x20by\x20o\
    ne\x20empty\x20response.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1d\x06\
    \x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x1d\x10\"\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03\x1d-?\n4\n\x04\x06\0\x02\x01\x12\x03\x20\x028\x1a'\x20One\
    \x20request\x20followed\x20by\x20one\x20response.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x20\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x20\x10\x1d\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x20(6\n\xac\x01\n\x04\
    \x06\0\x02\x02\x12\x03%\x02A\x1a\x9e\x01\x20One\x20request\x20followed\
    \x20by\x20one\x20response.\x20Response\x20has\x20cache\x20control\n\x20h\
    eaders\x20set\x20such\x20that\x20a\x20caching\x20HTTP\x20proxy\x20(such\
    \x20as\x20GFE)\x20can\n\x20satisfy\x20subsequent\x20requests.\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03%\x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03%\x19&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03%1?\n\x99\x01\n\x04\
    \x06\0\x02\x03\x12\x04)\x02*3\x1a\x8a\x01\x20One\x20request\x20followed\
    \x20by\x20a\x20sequence\x20of\x20responses\x20(streamed\x20download).\n\
    \x20The\x20server\x20returns\x20the\x20payload\x20with\x20client\x20desi\
    red\x20type\x20and\x20sizes.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03)\
    \x06\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03)\x1a4\n\x0c\n\x05\x06\0\
    \x02\x03\x06\x12\x03*\x0f\x15\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03*\x16\
    1\n\x9c\x01\n\x04\x06\0\x02\x04\x12\x04.\x02/+\x1a\x8d\x01\x20A\x20seque\
    nce\x20of\x20requests\x20followed\x20by\x20one\x20response\x20(streamed\
    \x20upload).\n\x20The\x20server\x20returns\x20the\x20aggregated\x20size\
    \x20of\x20client\x20payload\x20as\x20the\x20result.\n\n\x0c\n\x05\x06\0\
    \x02\x04\x01\x12\x03.\x06\x18\n\x0c\n\x05\x06\0\x02\x04\x05\x12\x03.\x19\
    \x1f\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03.\x209\n\x0c\n\x05\x06\0\x02\
    \x04\x03\x12\x03/\x0f)\n\xc6\x01\n\x04\x06\0\x02\x05\x12\x044\x0253\x1a\
    \xb7\x01\x20A\x20sequence\x20of\x20requests\x20with\x20each\x20request\
    \x20served\x20by\x20the\x20server\x20immediately.\n\x20As\x20one\x20requ\
    est\x20could\x20lead\x20to\x20multiple\x20responses,\x20this\x20interfac\
    e\n\x20demonstrates\x20the\x20idea\x20of\x20full\x20duplexing.\n\n\x0c\n\
    \x05\x06\0\x02\x05\x01\x12\x034\x06\x14\n\x0c\n\x05\x06\0\x02\x05\x05\
    \x12\x034\x15\x1b\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x034\x1c6\n\x0c\n\
    \x05\x06\0\x02\x05\x06\x12\x035\x0f\x15\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x035\x161\n\xf5\x01\n\x04\x06\0\x02\x06\x12\x04;\x02<3\x1a\xe6\x01\
    \x20A\x20sequence\x20of\x20requests\x20followed\x20by\x20a\x20sequence\
    \x20of\x20responses.\n\x20The\x20server\x20buffers\x20all\x20the\x20clie\
    nt\x20requests\x20and\x20then\x20serves\x20them\x20in\x20order.\x20A\n\
    \x20stream\x20of\x20responses\x20are\x20returned\x20to\x20the\x20client\
    \x20when\x20the\x20server\x20starts\x20with\n\x20first\x20request.\n\n\
    \x0c\n\x05\x06\0\x02\x06\x01\x12\x03;\x06\x14\n\x0c\n\x05\x06\0\x02\x06\
    \x05\x12\x03;\x15\x1b\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03;\x1c6\n\x0c\
    \n\x05\x06\0\x02\x06\x06\x12\x03<\x0f\x15\n\x0c\n\x05\x06\0\x02\x06\x03\
    \x12\x03<\x161\n\x8e\x01\n\x04\x06\0\x02\x07\x12\x03@\x02I\x1a\x80\x01\
    \x20The\x20test\x20server\x20will\x20not\x20implement\x20this\x20method.\
    \x20It\x20will\x20be\x20used\n\x20to\x20test\x20the\x20behavior\x20when\
    \x20clients\x20call\x20unimplemented\x20methods.\n\n\x0c\n\x05\x06\0\x02\
    \x07\x01\x12\x03@\x06\x17\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03@\x18*\n\
    \x0c\n\x05\x06\0\x02\x07\x03\x12\x03@5G\n]\n\x02\x06\x01\x12\x04E\0H\x01\
    \x1aQ\x20A\x20simple\x20service\x20NOT\x20implemented\x20at\x20servers\
    \x20so\x20clients\x20can\x20test\x20for\n\x20that\x20case.\n\n\n\n\x03\
    \x06\x01\x01\x12\x03E\x08\x1c\n5\n\x04\x06\x01\x02\0\x12\x03G\x02I\x1a(\
    \x20A\x20call\x20that\x20no\x20server\x20should\x20implement\n\n\x0c\n\
    \x05\x06\x01\x02\0\x01\x12\x03G\x06\x17\n\x0c\n\x05\x06\x01\x02\0\x02\
    \x12\x03G\x18*\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x03G5G\n9\n\x02\x06\x02\
    \x12\x04K\0N\x01\x1a-\x20A\x20service\x20used\x20to\x20control\x20reconn\
    ect\x20server.\n\n\n\n\x03\x06\x02\x01\x12\x03K\x08\x18\n\x0b\n\x04\x06\
    \x02\x02\0\x12\x03L\x02G\n\x0c\n\x05\x06\x02\x02\0\x01\x12\x03L\x06\x0b\
    \n\x0c\n\x05\x06\x02\x02\0\x02\x12\x03L\x0c(\n\x0c\n\x05\x06\x02\x02\0\
    \x03\x12\x03L3E\n\x0b\n\x04\x06\x02\x02\x01\x12\x03M\x02D\n\x0c\n\x05\
    \x06\x02\x02\x01\x01\x12\x03M\x06\n\n\x0c\n\x05\x06\x02\x02\x01\x02\x12\
    \x03M\x0b\x1d\n\x0c\n\x05\x06\x02\x02\x01\x03\x12\x03M(Bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::empty::file_descriptor().clone());
            deps.push(super::messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
