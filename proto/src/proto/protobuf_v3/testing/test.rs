// This file is generated by rust-protobuf 3.2.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `grpc/testing/test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17grpc/testing/test.proto\x12\x0cgrpc.testing\x1a\x18grpc/testing/em\
    pty.proto\x1a\x1bgrpc/testing/messages.proto2\xcb\x05\n\x0bTestService\
    \x125\n\tEmptyCall\x12\x13.grpc.testing.Empty\x1a\x13.grpc.testing.Empty\
    \x12F\n\tUnaryCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testi\
    ng.SimpleResponse\x12O\n\x12CacheableUnaryCall\x12\x1b.grpc.testing.Simp\
    leRequest\x1a\x1c.grpc.testing.SimpleResponse\x12l\n\x13StreamingOutputC\
    all\x12(.grpc.testing.StreamingOutputCallRequest\x1a).grpc.testing.Strea\
    mingOutputCallResponse0\x01\x12i\n\x12StreamingInputCall\x12'.grpc.testi\
    ng.StreamingInputCallRequest\x1a(.grpc.testing.StreamingInputCallRespons\
    e(\x01\x12i\n\x0eFullDuplexCall\x12(.grpc.testing.StreamingOutputCallReq\
    uest\x1a).grpc.testing.StreamingOutputCallResponse(\x010\x01\x12i\n\x0eH\
    alfDuplexCall\x12(.grpc.testing.StreamingOutputCallRequest\x1a).grpc.tes\
    ting.StreamingOutputCallResponse(\x010\x01\x12=\n\x11UnimplementedCall\
    \x12\x13.grpc.testing.Empty\x1a\x13.grpc.testing.Empty2U\n\x14Unimplemen\
    tedService\x12=\n\x11UnimplementedCall\x12\x13.grpc.testing.Empty\x1a\
    \x13.grpc.testing.Empty2\x89\x01\n\x10ReconnectService\x12;\n\x05Start\
    \x12\x1d.grpc.testing.ReconnectParams\x1a\x13.grpc.testing.Empty\x128\n\
    \x04Stop\x12\x13.grpc.testing.Empty\x1a\x1b.grpc.testing.ReconnectInfob\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::empty::file_descriptor().clone());
            deps.push(super::messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

pub use super::test_grpc::*;
