// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `report_qps_scenario_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!report_qps_scenario_service.proto\x12\x0cgrpc.testing\x1a\rcontrol.pr\
    oto2^\n\x18ReportQpsScenarioService\x12B\n\x0eReportScenario\x12\x1c.grp\
    c.testing.ScenarioResult\x1a\x12.grpc.testing.VoidJ\xdb\x06\n\x06\x12\
    \x04\x10\0\x19\x01\n\xb8\x05\n\x01\x0c\x12\x03\x10\0\x12\x1aw\x20An\x20i\
    ntegration\x20test\x20service\x20that\x20covers\x20all\x20the\x20method\
    \x20signature\x20permutations\n\x20of\x20unary/streaming\x20requests/res\
    ponses.\n2\xb4\x04\x20Copyright\x202015\x20gRPC\x20authors.\n\n\x20Licen\
    sed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\
    \"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\
    \x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtai\
    n\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http\
    ://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\t\n\x02\x03\0\x12\x03\x12\0\x17\n\x08\n\x01\x02\x12\x03\x14\0\x15\n\
    \n\n\x02\x06\0\x12\x04\x16\0\x19\x01\n\n\n\x03\x06\0\x01\x12\x03\x16\x08\
    \x20\n?\n\x04\x06\0\x02\0\x12\x03\x18\x024\x1a2\x20Report\x20results\x20\
    of\x20a\x20QPS\x20test\x20benchmark\x20scenario.\n\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x18\x06\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x18\x15#\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x18.2b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::control::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
