// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `route_guide.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

///  Points are represented as latitude-longitude pairs in the E7 representation
///  (degrees multiplied by 10**7 and rounded to the nearest integer).
///  Latitudes should be in the range +/- 90 degrees and longitude should be in
///  the range +/- 180 degrees (inclusive).
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:routeguide.Point)
pub struct Point {
    // message fields
    // @@protoc_insertion_point(field:routeguide.Point.latitude)
    pub latitude: i32,
    // @@protoc_insertion_point(field:routeguide.Point.longitude)
    pub longitude: i32,
    // special fields
    // @@protoc_insertion_point(special_field:routeguide.Point.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobufv3::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latitude",
            |m: &Point| { &m.latitude },
            |m: &mut Point| { &mut m.latitude },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "longitude",
            |m: &Point| { &m.longitude },
            |m: &mut Point| { &mut m.longitude },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<Point>(
            "Point",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for Point {
    const NAME: &'static str = "Point";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.latitude = is.read_int32()?;
                },
                16 => {
                    self.longitude = is.read_int32()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.latitude != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.latitude);
        }
        if self.longitude != 0 {
            my_size += ::protobufv3::rt::int32_size(2, self.longitude);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.latitude != 0 {
            os.write_int32(1, self.latitude)?;
        }
        if self.longitude != 0 {
            os.write_int32(2, self.longitude)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Point {
        Point::new()
    }

    fn clear(&mut self) {
        self.latitude = 0;
        self.longitude = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Point {
        static instance: Point = Point {
            latitude: 0,
            longitude: 0,
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for Point {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Point").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for Point {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A latitude-longitude rectangle, represented as two diagonally opposite
///  points "lo" and "hi".
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:routeguide.Rectangle)
pub struct Rectangle {
    // message fields
    ///  One corner of the rectangle.
    // @@protoc_insertion_point(field:routeguide.Rectangle.lo)
    pub lo: ::protobufv3::MessageField<Point>,
    ///  The other corner of the rectangle.
    // @@protoc_insertion_point(field:routeguide.Rectangle.hi)
    pub hi: ::protobufv3::MessageField<Point>,
    // special fields
    // @@protoc_insertion_point(special_field:routeguide.Rectangle.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Rectangle {
    fn default() -> &'a Rectangle {
        <Rectangle as ::protobufv3::Message>::default_instance()
    }
}

impl Rectangle {
    pub fn new() -> Rectangle {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Point>(
            "lo",
            |m: &Rectangle| { &m.lo },
            |m: &mut Rectangle| { &mut m.lo },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Point>(
            "hi",
            |m: &Rectangle| { &m.hi },
            |m: &mut Rectangle| { &mut m.hi },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<Rectangle>(
            "Rectangle",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for Rectangle {
    const NAME: &'static str = "Rectangle";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.lo)?;
                },
                18 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.hi)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.lo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.hi.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if let Some(v) = self.lo.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.hi.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Rectangle {
        Rectangle::new()
    }

    fn clear(&mut self) {
        self.lo.clear();
        self.hi.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Rectangle {
        static instance: Rectangle = Rectangle {
            lo: ::protobufv3::MessageField::none(),
            hi: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for Rectangle {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Rectangle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Rectangle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for Rectangle {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A feature names something at a given point.
///
///  If a feature could not be named, the name is empty.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:routeguide.Feature)
pub struct Feature {
    // message fields
    ///  The name of the feature.
    // @@protoc_insertion_point(field:routeguide.Feature.name)
    pub name: ::std::string::String,
    ///  The point where the feature is detected.
    // @@protoc_insertion_point(field:routeguide.Feature.location)
    pub location: ::protobufv3::MessageField<Point>,
    // special fields
    // @@protoc_insertion_point(special_field:routeguide.Feature.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Feature {
    fn default() -> &'a Feature {
        <Feature as ::protobufv3::Message>::default_instance()
    }
}

impl Feature {
    pub fn new() -> Feature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Feature| { &m.name },
            |m: &mut Feature| { &mut m.name },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Point>(
            "location",
            |m: &Feature| { &m.location },
            |m: &mut Feature| { &mut m.location },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<Feature>(
            "Feature",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for Feature {
    const NAME: &'static str = "Feature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.location)?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobufv3::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.location.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Feature {
        Feature::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.location.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Feature {
        static instance: Feature = Feature {
            name: ::std::string::String::new(),
            location: ::protobufv3::MessageField::none(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for Feature {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Feature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Feature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for Feature {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A RouteNote is a message sent while at a given point.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:routeguide.RouteNote)
pub struct RouteNote {
    // message fields
    ///  The location from which the message is sent.
    // @@protoc_insertion_point(field:routeguide.RouteNote.location)
    pub location: ::protobufv3::MessageField<Point>,
    ///  The message to be sent.
    // @@protoc_insertion_point(field:routeguide.RouteNote.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:routeguide.RouteNote.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RouteNote {
    fn default() -> &'a RouteNote {
        <RouteNote as ::protobufv3::Message>::default_instance()
    }
}

impl RouteNote {
    pub fn new() -> RouteNote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_message_field_accessor::<_, Point>(
            "location",
            |m: &RouteNote| { &m.location },
            |m: &mut RouteNote| { &mut m.location },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &RouteNote| { &m.message },
            |m: &mut RouteNote| { &mut m.message },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<RouteNote>(
            "RouteNote",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for RouteNote {
    const NAME: &'static str = "RouteNote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobufv3::rt::read_singular_message_into_field(is, &mut self.location)?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobufv3::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobufv3::rt::string_size(2, &self.message);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if let Some(v) = self.location.as_ref() {
            ::protobufv3::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RouteNote {
        RouteNote::new()
    }

    fn clear(&mut self) {
        self.location.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RouteNote {
        static instance: RouteNote = RouteNote {
            location: ::protobufv3::MessageField::none(),
            message: ::std::string::String::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for RouteNote {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RouteNote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RouteNote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for RouteNote {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A RouteSummary is received in response to a RecordRoute rpc.
///
///  It contains the number of individual points received, the number of
///  detected features, and the total distance covered as the cumulative sum of
///  the distance between each point.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:routeguide.RouteSummary)
pub struct RouteSummary {
    // message fields
    ///  The number of points received.
    // @@protoc_insertion_point(field:routeguide.RouteSummary.point_count)
    pub point_count: i32,
    ///  The number of known features passed while traversing the route.
    // @@protoc_insertion_point(field:routeguide.RouteSummary.feature_count)
    pub feature_count: i32,
    ///  The distance covered in metres.
    // @@protoc_insertion_point(field:routeguide.RouteSummary.distance)
    pub distance: i32,
    ///  The duration of the traversal in seconds.
    // @@protoc_insertion_point(field:routeguide.RouteSummary.elapsed_time)
    pub elapsed_time: i32,
    // special fields
    // @@protoc_insertion_point(special_field:routeguide.RouteSummary.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RouteSummary {
    fn default() -> &'a RouteSummary {
        <RouteSummary as ::protobufv3::Message>::default_instance()
    }
}

impl RouteSummary {
    pub fn new() -> RouteSummary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "point_count",
            |m: &RouteSummary| { &m.point_count },
            |m: &mut RouteSummary| { &mut m.point_count },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "feature_count",
            |m: &RouteSummary| { &m.feature_count },
            |m: &mut RouteSummary| { &mut m.feature_count },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "distance",
            |m: &RouteSummary| { &m.distance },
            |m: &mut RouteSummary| { &mut m.distance },
        ));
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "elapsed_time",
            |m: &RouteSummary| { &m.elapsed_time },
            |m: &mut RouteSummary| { &mut m.elapsed_time },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<RouteSummary>(
            "RouteSummary",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for RouteSummary {
    const NAME: &'static str = "RouteSummary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.point_count = is.read_int32()?;
                },
                16 => {
                    self.feature_count = is.read_int32()?;
                },
                24 => {
                    self.distance = is.read_int32()?;
                },
                32 => {
                    self.elapsed_time = is.read_int32()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.point_count != 0 {
            my_size += ::protobufv3::rt::int32_size(1, self.point_count);
        }
        if self.feature_count != 0 {
            my_size += ::protobufv3::rt::int32_size(2, self.feature_count);
        }
        if self.distance != 0 {
            my_size += ::protobufv3::rt::int32_size(3, self.distance);
        }
        if self.elapsed_time != 0 {
            my_size += ::protobufv3::rt::int32_size(4, self.elapsed_time);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.point_count != 0 {
            os.write_int32(1, self.point_count)?;
        }
        if self.feature_count != 0 {
            os.write_int32(2, self.feature_count)?;
        }
        if self.distance != 0 {
            os.write_int32(3, self.distance)?;
        }
        if self.elapsed_time != 0 {
            os.write_int32(4, self.elapsed_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RouteSummary {
        RouteSummary::new()
    }

    fn clear(&mut self) {
        self.point_count = 0;
        self.feature_count = 0;
        self.distance = 0;
        self.elapsed_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RouteSummary {
        static instance: RouteSummary = RouteSummary {
            point_count: 0,
            feature_count: 0,
            distance: 0,
            elapsed_time: 0,
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for RouteSummary {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RouteSummary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RouteSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for RouteSummary {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11route_guide.proto\x12\nrouteguide\"A\n\x05Point\x12\x1a\n\x08latit\
    ude\x18\x01\x20\x01(\x05R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\
    \x01(\x05R\tlongitude\"Q\n\tRectangle\x12!\n\x02lo\x18\x01\x20\x01(\x0b2\
    \x11.routeguide.PointR\x02lo\x12!\n\x02hi\x18\x02\x20\x01(\x0b2\x11.rout\
    eguide.PointR\x02hi\"L\n\x07Feature\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\x12-\n\x08location\x18\x02\x20\x01(\x0b2\x11.routeguide.PointR\
    \x08location\"T\n\tRouteNote\x12-\n\x08location\x18\x01\x20\x01(\x0b2\
    \x11.routeguide.PointR\x08location\x12\x18\n\x07message\x18\x02\x20\x01(\
    \tR\x07message\"\x93\x01\n\x0cRouteSummary\x12\x1f\n\x0bpoint_count\x18\
    \x01\x20\x01(\x05R\npointCount\x12#\n\rfeature_count\x18\x02\x20\x01(\
    \x05R\x0cfeatureCount\x12\x1a\n\x08distance\x18\x03\x20\x01(\x05R\x08dis\
    tance\x12!\n\x0celapsed_time\x18\x04\x20\x01(\x05R\x0belapsedTime2\x85\
    \x02\n\nRouteGuide\x126\n\nGetFeature\x12\x11.routeguide.Point\x1a\x13.r\
    outeguide.Feature\"\0\x12>\n\x0cListFeatures\x12\x15.routeguide.Rectangl\
    e\x1a\x13.routeguide.Feature\"\00\x01\x12>\n\x0bRecordRoute\x12\x11.rout\
    eguide.Point\x1a\x18.routeguide.RouteSummary\"\0(\x01\x12?\n\tRouteChat\
    \x12\x15.routeguide.RouteNote\x1a\x15.routeguide.RouteNote\"\0(\x010\x01\
    B6\n\x1bio.grpc.examples.routeguideB\x0fRouteGuideProtoP\x01\xa2\x02\x03\
    RTGJ\x82\x1d\n\x06\x12\x04\x0e\0n\x01\n\xbf\x04\n\x01\x0c\x12\x03\x0e\0\
    \x122\xb4\x04\x20Copyright\x202015\x20gRPC\x20authors.\n\n\x20Licensed\
    \x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Li\
    cense\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\
    \x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www\
    .apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20appl\
    icable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20d\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \x08\n\x01\x08\x12\x03\x10\0\"\n\t\n\x02\x08\n\x12\x03\x10\0\"\n\x08\n\
    \x01\x08\x12\x03\x11\04\n\t\n\x02\x08\x01\x12\x03\x11\04\n\x08\n\x01\x08\
    \x12\x03\x12\00\n\t\n\x02\x08\x08\x12\x03\x12\00\n\x08\n\x01\x08\x12\x03\
    \x13\0!\n\t\n\x02\x08$\x12\x03\x13\0!\n\x08\n\x01\x02\x12\x03\x15\0\x13\
    \n/\n\x02\x06\0\x12\x04\x18\04\x01\x1a#\x20Interface\x20exported\x20by\
    \x20the\x20server.\n\n\n\n\x03\x06\0\x01\x12\x03\x18\x08\x12\n\xa1\x01\n\
    \x04\x06\0\x02\0\x12\x03\x1f\x02,\x1a\x93\x01\x20A\x20simple\x20RPC.\n\n\
    \x20Obtains\x20the\x20feature\x20at\x20a\x20given\x20position.\n\n\x20A\
    \x20feature\x20with\x20an\x20empty\x20name\x20is\x20returned\x20if\x20th\
    ere's\x20no\x20feature\x20at\x20the\x20given\n\x20position.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x1f\x06\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x1f\x11\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x1f!(\n\xa7\x02\n\
    \x04\x06\0\x02\x01\x12\x03'\x029\x1a\x99\x02\x20A\x20server-to-client\
    \x20streaming\x20RPC.\n\n\x20Obtains\x20the\x20Features\x20available\x20\
    within\x20the\x20given\x20Rectangle.\x20\x20Results\x20are\n\x20streamed\
    \x20rather\x20than\x20returned\x20at\x20once\x20(e.g.\x20in\x20a\x20resp\
    onse\x20message\x20with\x20a\n\x20repeated\x20field),\x20as\x20the\x20re\
    ctangle\x20may\x20cover\x20a\x20large\x20area\x20and\x20contain\x20a\n\
    \x20huge\x20number\x20of\x20features.\n\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03'\x06\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03'\x13\x1c\n\x0c\n\
    \x05\x06\0\x02\x01\x06\x12\x03''-\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03'\
    .5\n\xa1\x01\n\x04\x06\0\x02\x02\x12\x03-\x029\x1a\x93\x01\x20A\x20clien\
    t-to-server\x20streaming\x20RPC.\n\n\x20Accepts\x20a\x20stream\x20of\x20\
    Points\x20on\x20a\x20route\x20being\x20traversed,\x20returning\x20a\n\
    \x20RouteSummary\x20when\x20traversal\x20is\x20completed.\n\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03-\x06\x11\n\x0c\n\x05\x06\0\x02\x02\x05\x12\
    \x03-\x12\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03-\x19\x1e\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03-)5\n\xb1\x01\n\x04\x06\0\x02\x03\x12\x033\x02\
    ?\x1a\xa3\x01\x20A\x20Bidirectional\x20streaming\x20RPC.\n\n\x20Accepts\
    \x20a\x20stream\x20of\x20RouteNotes\x20sent\x20while\x20a\x20route\x20is\
    \x20being\x20traversed,\n\x20while\x20receiving\x20other\x20RouteNotes\
    \x20(e.g.\x20from\x20other\x20users).\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x033\x06\x0f\n\x0c\n\x05\x06\0\x02\x03\x05\x12\x033\x10\x16\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x033\x17\x20\n\x0c\n\x05\x06\0\x02\x03\x06\
    \x12\x033+1\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x0332;\n\x91\x02\n\x02\x04\
    \0\x12\x04:\0=\x01\x1a\x84\x02\x20Points\x20are\x20represented\x20as\x20\
    latitude-longitude\x20pairs\x20in\x20the\x20E7\x20representation\n\x20(d\
    egrees\x20multiplied\x20by\x2010**7\x20and\x20rounded\x20to\x20the\x20ne\
    arest\x20integer).\n\x20Latitudes\x20should\x20be\x20in\x20the\x20range\
    \x20+/-\x2090\x20degrees\x20and\x20longitude\x20should\x20be\x20in\n\x20\
    the\x20range\x20+/-\x20180\x20degrees\x20(inclusive).\n\n\n\n\x03\x04\0\
    \x01\x12\x03:\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03;\x02\x15\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03;\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03;\
    \x08\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03;\x13\x14\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03<\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03<\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03<\x08\x11\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03<\x14\x15\nk\n\x02\x04\x01\x12\x04A\0G\x01\x1a_\x20A\x20\
    latitude-longitude\x20rectangle,\x20represented\x20as\x20two\x20diagonal\
    ly\x20opposite\n\x20points\x20\"lo\"\x20and\x20\"hi\".\n\n\n\n\x03\x04\
    \x01\x01\x12\x03A\x08\x11\n+\n\x04\x04\x01\x02\0\x12\x03C\x02\x0f\x1a\
    \x1e\x20One\x20corner\x20of\x20the\x20rectangle.\n\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03C\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03C\x08\n\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03C\r\x0e\n1\n\x04\x04\x01\x02\x01\
    \x12\x03F\x02\x0f\x1a$\x20The\x20other\x20corner\x20of\x20the\x20rectang\
    le.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03F\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03F\x08\n\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03F\
    \r\x0e\no\n\x02\x04\x02\x12\x04L\0R\x01\x1ac\x20A\x20feature\x20names\
    \x20something\x20at\x20a\x20given\x20point.\n\n\x20If\x20a\x20feature\
    \x20could\x20not\x20be\x20named,\x20the\x20name\x20is\x20empty.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03L\x08\x0f\n'\n\x04\x04\x02\x02\0\x12\x03N\x02\
    \x12\x1a\x1a\x20The\x20name\x20of\x20the\x20feature.\n\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03N\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03N\t\
    \r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03N\x10\x11\n7\n\x04\x04\x02\x02\
    \x01\x12\x03Q\x02\x15\x1a*\x20The\x20point\x20where\x20the\x20feature\
    \x20is\x20detected.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03Q\x02\x07\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03Q\x08\x10\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03Q\x13\x14\nC\n\x02\x04\x03\x12\x04U\0[\x01\x1a7\x20A\x20\
    RouteNote\x20is\x20a\x20message\x20sent\x20while\x20at\x20a\x20given\x20\
    point.\n\n\n\n\x03\x04\x03\x01\x12\x03U\x08\x11\n;\n\x04\x04\x03\x02\0\
    \x12\x03W\x02\x15\x1a.\x20The\x20location\x20from\x20which\x20the\x20mes\
    sage\x20is\x20sent.\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03W\x02\x07\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03W\x08\x10\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03W\x13\x14\n&\n\x04\x04\x03\x02\x01\x12\x03Z\x02\x15\x1a\x19\
    \x20The\x20message\x20to\x20be\x20sent.\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03Z\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03Z\t\x10\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03Z\x13\x14\n\xff\x01\n\x02\x04\x04\
    \x12\x04b\0n\x01\x1a\xf2\x01\x20A\x20RouteSummary\x20is\x20received\x20i\
    n\x20response\x20to\x20a\x20RecordRoute\x20rpc.\n\n\x20It\x20contains\
    \x20the\x20number\x20of\x20individual\x20points\x20received,\x20the\x20n\
    umber\x20of\n\x20detected\x20features,\x20and\x20the\x20total\x20distanc\
    e\x20covered\x20as\x20the\x20cumulative\x20sum\x20of\n\x20the\x20distanc\
    e\x20between\x20each\x20point.\n\n\n\n\x03\x04\x04\x01\x12\x03b\x08\x14\
    \n-\n\x04\x04\x04\x02\0\x12\x03d\x02\x18\x1a\x20\x20The\x20number\x20of\
    \x20points\x20received.\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03d\x02\x07\
    \n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03d\x08\x13\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03d\x16\x17\nN\n\x04\x04\x04\x02\x01\x12\x03g\x02\x1a\x1aA\
    \x20The\x20number\x20of\x20known\x20features\x20passed\x20while\x20trave\
    rsing\x20the\x20route.\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03g\x02\
    \x07\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03g\x08\x15\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03g\x18\x19\n.\n\x04\x04\x04\x02\x02\x12\x03j\x02\
    \x15\x1a!\x20The\x20distance\x20covered\x20in\x20metres.\n\n\x0c\n\x05\
    \x04\x04\x02\x02\x05\x12\x03j\x02\x07\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03j\x08\x10\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03j\x13\x14\n8\n\
    \x04\x04\x04\x02\x03\x12\x03m\x02\x19\x1a+\x20The\x20duration\x20of\x20t\
    he\x20traversal\x20in\x20seconds.\n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\
    \x03m\x02\x07\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03m\x08\x14\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03m\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Point::generated_message_descriptor_data());
            messages.push(Rectangle::generated_message_descriptor_data());
            messages.push(Feature::generated_message_descriptor_data());
            messages.push(RouteNote::generated_message_descriptor_data());
            messages.push(RouteSummary::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
