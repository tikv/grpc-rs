// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grpc/testing/test.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17grpc/testing/test.proto\x12\x0cgrpc.testing\x1a\x18grpc/testing/em\
    pty.proto\x1a\x1bgrpc/testing/messages.proto2\xcb\x05\n\x0bTestService\
    \x125\n\tEmptyCall\x12\x13.grpc.testing.Empty\x1a\x13.grpc.testing.Empty\
    \x12F\n\tUnaryCall\x12\x1b.grpc.testing.SimpleRequest\x1a\x1c.grpc.testi\
    ng.SimpleResponse\x12O\n\x12CacheableUnaryCall\x12\x1b.grpc.testing.Simp\
    leRequest\x1a\x1c.grpc.testing.SimpleResponse\x12l\n\x13StreamingOutputC\
    all\x12(.grpc.testing.StreamingOutputCallRequest\x1a).grpc.testing.Strea\
    mingOutputCallResponse0\x01\x12i\n\x12StreamingInputCall\x12'.grpc.testi\
    ng.StreamingInputCallRequest\x1a(.grpc.testing.StreamingInputCallRespons\
    e(\x01\x12i\n\x0eFullDuplexCall\x12(.grpc.testing.StreamingOutputCallReq\
    uest\x1a).grpc.testing.StreamingOutputCallResponse(\x010\x01\x12i\n\x0eH\
    alfDuplexCall\x12(.grpc.testing.StreamingOutputCallRequest\x1a).grpc.tes\
    ting.StreamingOutputCallResponse(\x010\x01\x12=\n\x11UnimplementedCall\
    \x12\x13.grpc.testing.Empty\x1a\x13.grpc.testing.Empty2U\n\x14Unimplemen\
    tedService\x12=\n\x11UnimplementedCall\x12\x13.grpc.testing.Empty\x1a\
    \x13.grpc.testing.Empty2\x89\x01\n\x10ReconnectService\x12;\n\x05Start\
    \x12\x1d.grpc.testing.ReconnectParams\x1a\x13.grpc.testing.Empty\x128\n\
    \x04Stop\x12\x13.grpc.testing.Empty\x1a\x1b.grpc.testing.ReconnectInfob\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

pub use super::test_grpc::*;
