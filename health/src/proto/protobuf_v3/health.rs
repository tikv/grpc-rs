// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `health.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobufv3::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.health.v1.HealthCheckRequest)
pub struct HealthCheckRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.health.v1.HealthCheckRequest.service)
    pub service: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.health.v1.HealthCheckRequest.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobufv3::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service",
            |m: &HealthCheckRequest| { &m.service },
            |m: &mut HealthCheckRequest| { &mut m.service },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckRequest>(
            "HealthCheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for HealthCheckRequest {
    const NAME: &'static str = "HealthCheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service = is.read_string()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobufv3::rt::string_size(1, &self.service);
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn clear(&mut self) {
        self.service.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static instance: HealthCheckRequest = HealthCheckRequest {
            service: ::std::string::String::new(),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for HealthCheckRequest {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for HealthCheckRequest {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.health.v1.HealthCheckResponse)
pub struct HealthCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.health.v1.HealthCheckResponse.status)
    pub status: ::protobufv3::EnumOrUnknown<health_check_response::ServingStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.health.v1.HealthCheckResponse.special_fields)
    pub special_fields: ::protobufv3::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobufv3::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobufv3::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobufv3::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &HealthCheckResponse| { &m.status },
            |m: &mut HealthCheckResponse| { &mut m.status },
        ));
        ::protobufv3::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckResponse>(
            "HealthCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobufv3::Message for HealthCheckResponse {
    const NAME: &'static str = "HealthCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobufv3::CodedInputStream<'_>) -> ::protobufv3::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobufv3::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobufv3::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN) {
            my_size += ::protobufv3::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobufv3::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobufv3::CodedOutputStream<'_>) -> ::protobufv3::Result<()> {
        if self.status != ::protobufv3::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN) {
            os.write_enum(1, ::protobufv3::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobufv3::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobufv3::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn clear(&mut self) {
        self.status = ::protobufv3::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static instance: HealthCheckResponse = HealthCheckResponse {
            status: ::protobufv3::EnumOrUnknown::from_i32(0),
            special_fields: ::protobufv3::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobufv3::MessageFull for HealthCheckResponse {
    fn descriptor() -> ::protobufv3::reflect::MessageDescriptor {
        static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::MessageDescriptor> = ::protobufv3::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobufv3::text_format::fmt(self, f)
    }
}

impl ::protobufv3::reflect::ProtobufValue for HealthCheckResponse {
    type RuntimeType = ::protobufv3::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HealthCheckResponse`
pub mod health_check_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:grpc.health.v1.HealthCheckResponse.ServingStatus)
    pub enum ServingStatus {
        // @@protoc_insertion_point(enum_value:grpc.health.v1.HealthCheckResponse.ServingStatus.UNKNOWN)
        UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:grpc.health.v1.HealthCheckResponse.ServingStatus.SERVING)
        SERVING = 1,
        // @@protoc_insertion_point(enum_value:grpc.health.v1.HealthCheckResponse.ServingStatus.NOT_SERVING)
        NOT_SERVING = 2,
        // @@protoc_insertion_point(enum_value:grpc.health.v1.HealthCheckResponse.ServingStatus.SERVICE_UNKNOWN)
        SERVICE_UNKNOWN = 3,
    }

    impl ::protobufv3::Enum for ServingStatus {
        const NAME: &'static str = "ServingStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ServingStatus> {
            match value {
                0 => ::std::option::Option::Some(ServingStatus::UNKNOWN),
                1 => ::std::option::Option::Some(ServingStatus::SERVING),
                2 => ::std::option::Option::Some(ServingStatus::NOT_SERVING),
                3 => ::std::option::Option::Some(ServingStatus::SERVICE_UNKNOWN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ServingStatus] = &[
            ServingStatus::UNKNOWN,
            ServingStatus::SERVING,
            ServingStatus::NOT_SERVING,
            ServingStatus::SERVICE_UNKNOWN,
        ];
    }

    impl ::protobufv3::EnumFull for ServingStatus {
        fn enum_descriptor() -> ::protobufv3::reflect::EnumDescriptor {
            static descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::EnumDescriptor> = ::protobufv3::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("HealthCheckResponse.ServingStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobufv3::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ServingStatus {
        fn default() -> Self {
            ServingStatus::UNKNOWN
        }
    }

    impl ServingStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobufv3::reflect::GeneratedEnumDescriptorData {
            ::protobufv3::reflect::GeneratedEnumDescriptorData::new::<ServingStatus>("HealthCheckResponse.ServingStatus")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0chealth.proto\x12\x0egrpc.health.v1\".\n\x12HealthCheckRequest\x12\
    \x18\n\x07service\x18\x01\x20\x01(\tR\x07service\"\xb1\x01\n\x13HealthCh\
    eckResponse\x12I\n\x06status\x18\x01\x20\x01(\x0e21.grpc.health.v1.Healt\
    hCheckResponse.ServingStatusR\x06status\"O\n\rServingStatus\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x0b\n\x07SERVING\x10\x01\x12\x0f\n\x0bNOT_SERVING\
    \x10\x02\x12\x13\n\x0fSERVICE_UNKNOWN\x10\x032\xae\x01\n\x06Health\x12P\
    \n\x05Check\x12\".grpc.health.v1.HealthCheckRequest\x1a#.grpc.health.v1.\
    HealthCheckResponse\x12R\n\x05Watch\x12\".grpc.health.v1.HealthCheckRequ\
    est\x1a#.grpc.health.v1.HealthCheckResponse0\x01Ba\n\x11io.grpc.health.v\
    1B\x0bHealthProtoP\x01Z,google.golang.org/grpc/health/grpc_health_v1\xaa\
    \x02\x0eGrpc.Health.V1J\x97\x12\n\x06\x12\x04\x11\0>\x01\n\xc6\x05\n\x01\
    \x0c\x12\x03\x11\0\x122\xb7\x04\x20Copyright\x202015\x20The\x20gRPC\x20A\
    uthors\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\
    \x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n2\x81\x01\x20The\x20canonical\x20version\x20of\x20\
    this\x20proto\x20can\x20be\x20found\x20at\n\x20https://github.com/grpc/g\
    rpc-proto/blob/master/grpc/health/v1/health.proto\n\n\x08\n\x01\x02\x12\
    \x03\x13\0\x17\n\x08\n\x01\x08\x12\x03\x15\0+\n\t\n\x02\x08%\x12\x03\x15\
    \0+\n\x08\n\x01\x08\x12\x03\x16\0C\n\t\n\x02\x08\x0b\x12\x03\x16\0C\n\
    \x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\
    \x01\x08\x12\x03\x18\0,\n\t\n\x02\x08\x08\x12\x03\x18\0,\n\x08\n\x01\x08\
    \x12\x03\x19\0*\n\t\n\x02\x08\x01\x12\x03\x19\0*\n\n\n\x02\x04\0\x12\x04\
    \x1b\0\x1d\x01\n\n\n\x03\x04\0\x01\x12\x03\x1b\x08\x1a\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x1c\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1c\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x1c\x13\x14\n\n\n\x02\x04\x01\x12\x04\x1f\0'\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x1f\x08\x1b\n\x0c\n\x04\x04\x01\x04\0\x12\x04\
    \x20\x02%\x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x20\x07\x14\n\r\n\
    \x06\x04\x01\x04\0\x02\0\x12\x03!\x04\x10\n\x0e\n\x07\x04\x01\x04\0\x02\
    \0\x01\x12\x03!\x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03!\x0e\
    \x0f\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03\"\x04\x10\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x01\x01\x12\x03\"\x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x01\x02\x12\x03\"\x0e\x0f\n\r\n\x06\x04\x01\x04\0\x02\x02\x12\x03#\x04\
    \x14\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03#\x04\x0f\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x02\x02\x12\x03#\x12\x13\n/\n\x06\x04\x01\x04\0\x02\
    \x03\x12\x03$\x04\x18\"\x20\x20Used\x20only\x20by\x20the\x20Watch\x20met\
    hod.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03$\x04\x13\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x03\x02\x12\x03$\x16\x17\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03&\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03&\x02\x0f\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03&\x10\x16\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03&\x19\x1a\n\n\n\x02\x06\0\x12\x04)\0>\x01\n\n\n\x03\x06\0\x01\
    \x12\x03)\x08\x0e\n^\n\x04\x06\0\x02\0\x12\x03,\x02>\x1aQ\x20If\x20the\
    \x20requested\x20service\x20is\x20unknown,\x20the\x20call\x20will\x20fai\
    l\x20with\x20status\n\x20NOT_FOUND.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03,\x06\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03,\x0c\x1e\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03,)<\n\xde\x06\n\x04\x06\0\x02\x01\x12\x03=\x02E\
    \x1a\xd0\x06\x20Performs\x20a\x20watch\x20for\x20the\x20serving\x20statu\
    s\x20of\x20the\x20requested\x20service.\n\x20The\x20server\x20will\x20im\
    mediately\x20send\x20back\x20a\x20message\x20indicating\x20the\x20curren\
    t\n\x20serving\x20status.\x20\x20It\x20will\x20then\x20subsequently\x20s\
    end\x20a\x20new\x20message\x20whenever\n\x20the\x20service's\x20serving\
    \x20status\x20changes.\n\n\x20If\x20the\x20requested\x20service\x20is\
    \x20unknown\x20when\x20the\x20call\x20is\x20received,\x20the\n\x20server\
    \x20will\x20send\x20a\x20message\x20setting\x20the\x20serving\x20status\
    \x20to\n\x20SERVICE_UNKNOWN\x20but\x20will\x20*not*\x20terminate\x20the\
    \x20call.\x20\x20If\x20at\x20some\n\x20future\x20point,\x20the\x20servin\
    g\x20status\x20of\x20the\x20service\x20becomes\x20known,\x20the\n\x20ser\
    ver\x20will\x20send\x20a\x20new\x20message\x20with\x20the\x20service's\
    \x20serving\x20status.\n\n\x20If\x20the\x20call\x20terminates\x20with\
    \x20status\x20UNIMPLEMENTED,\x20then\x20clients\n\x20should\x20assume\
    \x20this\x20method\x20is\x20not\x20supported\x20and\x20should\x20not\x20\
    retry\x20the\n\x20call.\x20\x20If\x20the\x20call\x20terminates\x20with\
    \x20any\x20other\x20status\x20(including\x20OK),\n\x20clients\x20should\
    \x20retry\x20the\x20call\x20with\x20appropriate\x20exponential\x20backof\
    f.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03=\x06\x0b\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03=\x0c\x1e\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03=)/\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03=0Cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobufv3::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobufv3::rt::Lazy<::protobufv3::descriptor::FileDescriptorProto> = ::protobufv3::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobufv3::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobufv3::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobufv3::rt::Lazy<::protobufv3::reflect::GeneratedFileDescriptor> = ::protobufv3::rt::Lazy::new();
    static file_descriptor: ::protobufv3::rt::Lazy<::protobufv3::reflect::FileDescriptor> = ::protobufv3::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(HealthCheckRequest::generated_message_descriptor_data());
            messages.push(HealthCheckResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(health_check_response::ServingStatus::generated_enum_descriptor_data());
            ::protobufv3::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobufv3::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
